
uduck.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001770  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001770  00001804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800068  00800068  0000180c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  00001820  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016f5  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cb  00000000  00000000  000030d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000095e  00000000  00000000  000037a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00004100  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000553  00000000  00000000  000041c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c12  00000000  00000000  00004713  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00005325  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	27 c6       	rjmp	.+3150   	; 0xc50 <__ctors_end>
       2:	1e c8       	rjmp	.-4036   	; 0xfffff040 <__eeprom_end+0xff7ef040>
       4:	40 c6       	rjmp	.+3200   	; 0xc86 <__bad_interrupt>
       6:	3f c6       	rjmp	.+3198   	; 0xc86 <__bad_interrupt>
       8:	3e c6       	rjmp	.+3196   	; 0xc86 <__bad_interrupt>
       a:	3d c6       	rjmp	.+3194   	; 0xc86 <__bad_interrupt>
       c:	3c c6       	rjmp	.+3192   	; 0xc86 <__bad_interrupt>
       e:	3b c6       	rjmp	.+3190   	; 0xc86 <__bad_interrupt>
      10:	3a c6       	rjmp	.+3188   	; 0xc86 <__bad_interrupt>
      12:	39 c6       	rjmp	.+3186   	; 0xc86 <__bad_interrupt>
      14:	38 c6       	rjmp	.+3184   	; 0xc86 <__bad_interrupt>
      16:	37 c6       	rjmp	.+3182   	; 0xc86 <__bad_interrupt>
      18:	36 c6       	rjmp	.+3180   	; 0xc86 <__bad_interrupt>
      1a:	35 c6       	rjmp	.+3178   	; 0xc86 <__bad_interrupt>
      1c:	34 c6       	rjmp	.+3176   	; 0xc86 <__bad_interrupt>

0000001e <__trampolines_end>:
      1e:	05 01       	movw	r0, r10
      20:	09 06       	cpc	r0, r25
      22:	a1 01       	movw	r20, r2
      24:	05 07       	cpc	r16, r21
      26:	19 e0       	ldi	r17, 0x09	; 9
      28:	29 e7       	ldi	r18, 0x79	; 121
      2a:	15 00       	.word	0x0015	; ????
      2c:	25 01       	movw	r4, r10
      2e:	75 01       	movw	r14, r10
      30:	95 08       	sbc	r9, r5
      32:	81 02       	muls	r24, r17
      34:	95 01       	movw	r18, r10
      36:	75 08       	sbc	r7, r5
      38:	25 65       	ori	r18, 0x55	; 85
      3a:	19 00       	.word	0x0019	; ????
      3c:	29 65       	ori	r18, 0x59	; 89
      3e:	81 00       	.word	0x0081	; ????
      40:	c0 44       	sbci	r28, 0x40	; 64

00000041 <attack>:
      41:	44 43 42 41 41 41 41 41 41 41 41 41 41 41 41 41     DCBAAAAAAAAAAAAA
      51:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
      61:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
      71:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
      81:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
      91:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
      a1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
      b1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
      c1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
      d1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
      e1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
      f1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     101:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     111:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     121:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     131:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     141:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     151:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     161:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     171:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     181:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     191:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     1a1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     1b1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     1c1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     1d1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     1e1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     1f1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     201:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     211:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     221:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     231:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     241:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     251:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     261:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     271:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     281:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     291:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     2a1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     2b1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     2c1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     2d1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     2e1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     2f1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     301:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     311:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     321:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     331:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     341:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     351:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     361:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     371:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     381:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     391:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     3a1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     3b1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     3c1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     3d1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     3e1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     3f1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     401:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     411:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     421:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     431:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     441:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     451:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     461:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     471:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     481:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     491:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     4a1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     4b1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     4c1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     4d1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     4e1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     4f1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     501:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     511:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     521:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     531:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     541:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     551:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     561:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     571:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     581:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     591:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     5a1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     5b1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     5c1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     5d1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     5e1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     5f1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     601:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     611:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     621:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     631:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     641:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     651:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     661:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     671:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     681:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     691:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     6a1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     6b1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     6c1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     6d1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     6e1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     6f1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     701:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     711:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     721:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     731:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     741:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     751:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     761:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     771:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     781:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     791:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     7a1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     7b1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     7c1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     7d1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     7e1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     7f1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     801:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     811:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     821:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     831:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     841:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     851:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     861:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     871:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     881:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     891:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     8a1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     8b1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     8c1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     8d1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     8e1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     8f1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     901:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     911:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     921:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     931:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     941:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     951:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     961:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     971:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     981:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     991:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     9a1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     9b1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     9c1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     9d1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     9e1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     9f1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     a01:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     a11:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     a21:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     a31:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     a41:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     a51:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     a61:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     a71:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     a81:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     a91:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     aa1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     ab1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     ac1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     ad1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     ae1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     af1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     b01:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     b11:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     b21:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     b31:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     b41:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     b51:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     b61:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     b71:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     b81:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     b91:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     ba1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     bb1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     bc1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     bd1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     be1:	41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41     AAAAAAAAAAAAAAAA
     bf1:	41 41 41 41 41 41 41 41                             AAAAAAAA

00000bf9 <usbDescriptorConfiguration>:
     bf9:	09 02 22 00 01 01 00 80 19 09 04 00 00 01 03 00     ..".............
     c09:	00 00 09 21 01 01 00 01 22 23 00 07 05 81 03 08     ...!...."#......
     c19:	00 0a                                               ..

00000c1b <usbDescriptorDevice>:
     c1b:	12 01 10 01 00 00 00 08 42 42 31 e1 00 01 01 02     ........BB1.....
     c2b:	00 01                                               ..

00000c2d <usbDescriptorStringDevice>:
     c2d:	0c 03 75 00 44 00 75 00 63 00 6b 00                 ..u.D.u.c.k.

00000c39 <usbDescriptorStringVendor>:
     c39:	12 03 70 00 68 00 69 00 6b 00 73 00 68 00 75 00     ..p.h.i.k.s.h.u.
     c49:	6e 00                                               n.

00000c4b <usbDescriptorString0>:
     c4b:	04 03 09 04 00                                      .....

00000c50 <__ctors_end>:
     c50:	11 24       	eor	r1, r1
     c52:	1f be       	out	0x3f, r1	; 63
     c54:	cf e5       	ldi	r28, 0x5F	; 95
     c56:	d2 e0       	ldi	r29, 0x02	; 2
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	cd bf       	out	0x3d, r28	; 61

00000c5c <__do_copy_data>:
     c5c:	10 e0       	ldi	r17, 0x00	; 0
     c5e:	a0 e6       	ldi	r26, 0x60	; 96
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e0 e7       	ldi	r30, 0x70	; 112
     c64:	f7 e1       	ldi	r31, 0x17	; 23
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <__do_copy_data+0x10>
     c68:	05 90       	lpm	r0, Z+
     c6a:	0d 92       	st	X+, r0
     c6c:	a8 36       	cpi	r26, 0x68	; 104
     c6e:	b1 07       	cpc	r27, r17
     c70:	d9 f7       	brne	.-10     	; 0xc68 <__do_copy_data+0xc>

00000c72 <__do_clear_bss>:
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	a8 e6       	ldi	r26, 0x68	; 104
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <.do_clear_bss_start>

00000c7a <.do_clear_bss_loop>:
     c7a:	1d 92       	st	X+, r1

00000c7c <.do_clear_bss_start>:
     c7c:	ad 3a       	cpi	r26, 0xAD	; 173
     c7e:	b2 07       	cpc	r27, r18
     c80:	e1 f7       	brne	.-8      	; 0xc7a <.do_clear_bss_loop>
     c82:	3b d3       	rcall	.+1654   	; 0x12fa <main>
     c84:	73 c5       	rjmp	.+2790   	; 0x176c <_exit>

00000c86 <__bad_interrupt>:
     c86:	bc c9       	rjmp	.-3208   	; 0x0 <__vectors>

00000c88 <usbFunctionSetup>:
{
    TCCR1 = 0x0b; // select clock: 16.5M/1k -> overflow rate = 16.5M/256k = 62.94 Hz
}

uchar usbFunctionSetup(uchar data[8])
{
     c88:	fc 01       	movw	r30, r24
    usbRequest_t *rq = (void *)data;

    usbMsgPtr = reportBuffer;
     c8a:	84 e7       	ldi	r24, 0x74	; 116
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	90 93 92 00 	sts	0x0092, r25
     c92:	80 93 91 00 	sts	0x0091, r24
    if ((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS) { // class request type
     c96:	80 81       	ld	r24, Z
     c98:	80 76       	andi	r24, 0x60	; 96
     c9a:	80 32       	cpi	r24, 0x20	; 32
     c9c:	e9 f4       	brne	.+58     	; 0xcd8 <usbFunctionSetup+0x50>
        if (rq->bRequest == USBRQ_HID_GET_REPORT) { // wValue: ReportType (highbyte), ReportID (lowbyte)
     c9e:	81 81       	ldd	r24, Z+1	; 0x01
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	59 f4       	brne	.+22     	; 0xcba <usbFunctionSetup+0x32>
 * for the second INPUT item.
 */

static void buildReport(uchar mod, uchar key)
{
    reportCount++;
     ca4:	80 91 72 00 	lds	r24, 0x0072
     ca8:	8f 5f       	subi	r24, 0xFF	; 255
     caa:	80 93 72 00 	sts	0x0072, r24
    reportBuffer[0] = mod;
     cae:	10 92 74 00 	sts	0x0074, r1
    reportBuffer[1] = key;
     cb2:	10 92 75 00 	sts	0x0075, r1
    usbMsgPtr = reportBuffer;
    if ((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS) { // class request type
        if (rq->bRequest == USBRQ_HID_GET_REPORT) { // wValue: ReportType (highbyte), ReportID (lowbyte)
            // we only have one report type, so don't look at wValue
            buildReport(0, 0);
            return sizeof(reportBuffer);
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	08 95       	ret
        } else if (rq->bRequest == USBRQ_HID_GET_IDLE) {
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	41 f4       	brne	.+16     	; 0xcce <usbFunctionSetup+0x46>
            usbMsgPtr = &idleRate;
     cbe:	83 e7       	ldi	r24, 0x73	; 115
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	90 93 92 00 	sts	0x0092, r25
     cc6:	80 93 91 00 	sts	0x0091, r24
            return 1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	08 95       	ret
        } else if(rq->bRequest == USBRQ_HID_SET_IDLE) {
     cce:	8a 30       	cpi	r24, 0x0A	; 10
     cd0:	19 f4       	brne	.+6      	; 0xcd8 <usbFunctionSetup+0x50>
            idleRate = rq->wValue.bytes[1];
     cd2:	83 81       	ldd	r24, Z+3	; 0x03
     cd4:	80 93 73 00 	sts	0x0073, r24
        }
    } else {
        /* no vendor specific requests implemented */
    }
    return 0;
     cd8:	80 e0       	ldi	r24, 0x00	; 0
}
     cda:	08 95       	ret

00000cdc <usbEventResetReady>:
ATTiny25, ATTiny45, ATTiny85), it may be useful to search for the optimum in
both regions.
*/

void usbEventResetReady(void)
{
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	c8 e0       	ldi	r28, 0x08	; 8
     cec:	d0 e0       	ldi	r29, 0x00	; 0
 * experimental purposes only!
 */
static void calibrateOscillator(void)
{
    uchar step = 128;
    uchar trialValue = 0, optimumValue;
     cee:	f1 2c       	mov	r15, r1
 * the 12 MHz clock! Use the RC oscillator calibrated to 12 MHz for
 * experimental purposes only!
 */
static void calibrateOscillator(void)
{
    uchar step = 128;
     cf0:	80 e8       	ldi	r24, 0x80	; 128
     cf2:	e8 2e       	mov	r14, r24
    uchar trialValue = 0, optimumValue;
    int x, optimumDev, targetValue = (unsigned)(1499 * (double)F_CPU / 10.5e6 + 0.5);

    // do a binary search:
    do {
        OSCCAL = trialValue + step;
     cf4:	de 2c       	mov	r13, r14
     cf6:	df 0c       	add	r13, r15
     cf8:	d1 be       	out	0x31, r13	; 49
        x = usbMeasureFrameLength();    // proportional to current real frequency
     cfa:	8f d1       	rcall	.+798    	; 0x101a <usbMeasureFrameLength>
     cfc:	8c 01       	movw	r16, r24
        if(x < targetValue)             // frequency still too low
     cfe:	04 33       	cpi	r16, 0x34	; 52
     d00:	89 e0       	ldi	r24, 0x09	; 9
     d02:	18 07       	cpc	r17, r24
     d04:	0c f4       	brge	.+2      	; 0xd08 <usbEventResetReady+0x2c>
            trialValue += step;
     d06:	fd 2c       	mov	r15, r13
        step >>= 1;
     d08:	e6 94       	lsr	r14
     d0a:	21 97       	sbiw	r28, 0x01	; 1
    } while(step > 0);
     d0c:	20 97       	sbiw	r28, 0x00	; 0
     d0e:	91 f7       	brne	.-28     	; 0xcf4 <usbEventResetReady+0x18>

    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; // this is certainly far away from optimum
    for (OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++) {
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	8f 0d       	add	r24, r15
     d14:	81 bf       	out	0x31, r24	; 49
     d16:	cf 2d       	mov	r28, r15
     d18:	d0 e0       	ldi	r29, 0x00	; 0
     d1a:	21 96       	adiw	r28, 0x01	; 1
     d1c:	81 b7       	in	r24, 0x31	; 49
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	c8 17       	cp	r28, r24
     d22:	d9 07       	cpc	r29, r25
     d24:	8c f0       	brlt	.+34     	; 0xd48 <usbEventResetReady+0x6c>
        x = usbMeasureFrameLength() - targetValue;
     d26:	79 d1       	rcall	.+754    	; 0x101a <usbMeasureFrameLength>
     d28:	84 53       	subi	r24, 0x34	; 52
     d2a:	99 40       	sbci	r25, 0x09	; 9
     d2c:	97 ff       	sbrs	r25, 7
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <usbEventResetReady+0x5a>
     d30:	91 95       	neg	r25
     d32:	81 95       	neg	r24
     d34:	91 09       	sbc	r25, r1
        if (x < 0)
            x = -x;
        if (x < optimumDev) {
     d36:	80 17       	cp	r24, r16
     d38:	91 07       	cpc	r25, r17
     d3a:	14 f4       	brge	.+4      	; 0xd40 <usbEventResetReady+0x64>
            optimumDev = x;
            optimumValue = OSCCAL;
     d3c:	f1 b6       	in	r15, 0x31	; 49
     d3e:	8c 01       	movw	r16, r24

    /* We have a precision of +/- 1 for optimum OSCCAL here */
    /* now do a neighborhood search for optimum value */
    optimumValue = trialValue;
    optimumDev = x; // this is certainly far away from optimum
    for (OSCCAL = trialValue - 1; OSCCAL <= trialValue + 1; OSCCAL++) {
     d40:	81 b7       	in	r24, 0x31	; 49
     d42:	8f 5f       	subi	r24, 0xFF	; 255
     d44:	81 bf       	out	0x31, r24	; 49
     d46:	ea cf       	rjmp	.-44     	; 0xd1c <usbEventResetReady+0x40>
        if (x < optimumDev) {
            optimumDev = x;
            optimumValue = OSCCAL;
        }
    }
    OSCCAL = optimumValue;
     d48:	f1 be       	out	0x31, r15	; 49
*/

void usbEventResetReady(void)
{
    calibrateOscillator();
    eeprom_write_byte(0, OSCCAL); // store the calibrated value in EEPROM
     d4a:	61 b7       	in	r22, 0x31	; 49
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
}
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	df 90       	pop	r13
*/

void usbEventResetReady(void)
{
    calibrateOscillator();
    eeprom_write_byte(0, OSCCAL); // store the calibrated value in EEPROM
     d5e:	38 c4       	rjmp	.+2160   	; 0x15d0 <__eewr_byte_tn85>

00000d60 <usbSetInterrupt>:

/* ------------------------------------------------------------------------- */

#if USB_CFG_HAVE_INTRIN_ENDPOINT
USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     d60:	cf 93       	push	r28
     d62:	c6 2f       	mov	r28, r22
#endif
#if 0   /* No runtime checks! Caller is responsible for valid data! */
    if(len > 8) /* interrupt transfers are limited to 8 bytes */
        len = 8;
#endif
    if(usbTxLen1 & 0x10){   /* packet buffer was empty */
     d64:	20 91 60 00 	lds	r18, 0x0060
     d68:	24 ff       	sbrs	r18, 4
     d6a:	0b c0       	rjmp	.+22     	; 0xd82 <usbSetInterrupt+0x22>
        usbTxBuf1[0] ^= USBPID_DATA0 ^ USBPID_DATA1;    /* toggle token */
     d6c:	20 91 83 00 	lds	r18, 0x0083
     d70:	38 e8       	ldi	r19, 0x88	; 136
     d72:	23 27       	eor	r18, r19
     d74:	20 93 83 00 	sts	0x0083, r18
     d78:	fc 01       	movw	r30, r24
     d7a:	a4 e8       	ldi	r26, 0x84	; 132
     d7c:	b0 e0       	ldi	r27, 0x00	; 0

/* ------------------------------------------------------------------------- */

#if USB_CFG_HAVE_INTRIN_ENDPOINT
USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
     d7e:	8c 2f       	mov	r24, r28
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <usbSetInterrupt+0x2a>
        len = 8;
#endif
    if(usbTxLen1 & 0x10){   /* packet buffer was empty */
        usbTxBuf1[0] ^= USBPID_DATA0 ^ USBPID_DATA1;    /* toggle token */
    }else{
        usbTxLen1 = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
     d82:	2a e5       	ldi	r18, 0x5A	; 90
     d84:	20 93 60 00 	sts	0x0060, r18
     d88:	f7 cf       	rjmp	.-18     	; 0xd78 <usbSetInterrupt+0x18>
    }
    p = usbTxBuf1 + 1;
    for(i=len;i--;)
     d8a:	81 50       	subi	r24, 0x01	; 1
     d8c:	18 f0       	brcs	.+6      	; 0xd94 <usbSetInterrupt+0x34>
        *p++ = *data++;
     d8e:	91 91       	ld	r25, Z+
     d90:	9d 93       	st	X+, r25
     d92:	fb cf       	rjmp	.-10     	; 0xd8a <usbSetInterrupt+0x2a>
    usbCrc16Append(&usbTxBuf1[1], len);
     d94:	6c 2f       	mov	r22, r28
     d96:	84 e8       	ldi	r24, 0x84	; 132
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	3b d1       	rcall	.+630    	; 0x1012 <usbCrc16Append>
    usbTxLen1 = len + 4;    /* len must be given including sync byte */
     d9c:	cc 5f       	subi	r28, 0xFC	; 252
     d9e:	c0 93 60 00 	sts	0x0060, r28
    DBG2(0x21, usbTxBuf1, len + 3);
}
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
schar   len;
uchar   i;

    if((len = usbRxLen) > 0){
     daa:	80 91 93 00 	lds	r24, 0x0093
     dae:	18 16       	cp	r1, r24
     db0:	0c f0       	brlt	.+2      	; 0xdb4 <usbPoll+0xe>
     db2:	ae c0       	rjmp	.+348    	; 0xf10 <usbPoll+0x16a>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len - 3);
     db4:	90 91 90 00 	lds	r25, 0x0090
    if(usbRxToken < 0x10){  /* endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return; /* no reply expected, hence no usbMsgPtr, usbMsgFlags, usbMsgLen set */
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
     db8:	20 91 8f 00 	lds	r18, 0x008F
     dbc:	2d 32       	cpi	r18, 0x2D	; 45
     dbe:	19 f0       	breq	.+6      	; 0xdc6 <usbPoll+0x20>
 * better results with an inlined function. Test condition: PowerSwitch code.
 */
static void usbProcessRx(uchar *data, uchar len)
{
usbRequest_t    *rq = (void *)data;
uchar           replyLen = 0, flags = USB_FLG_USE_DEFAULT_RW;
     dc0:	90 e8       	ldi	r25, 0x80	; 128
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	9f c0       	rjmp	.+318    	; 0xf04 <usbPoll+0x15e>
        usbFunctionWriteOut(data, len);
        return; /* no reply expected, hence no usbMsgPtr, usbMsgFlags, usbMsgLen set */
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        usbTxLen = USBPID_NAK;  /* abort pending transmit */
     dc6:	2a e5       	ldi	r18, 0x5A	; 90
     dc8:	20 93 61 00 	sts	0x0061, r18
        if(len == 8){   /* Setup size must be always 8 bytes. Ignore otherwise. */
     dcc:	8b 30       	cpi	r24, 0x0B	; 11
     dce:	c1 f7       	brne	.-16     	; 0xdc0 <usbPoll+0x1a>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len - 3);
     dd0:	cc e0       	ldi	r28, 0x0C	; 12
     dd2:	d0 e0       	ldi	r29, 0x00	; 0
     dd4:	c9 1b       	sub	r28, r25
     dd6:	d1 09       	sbc	r29, r1
     dd8:	c9 56       	subi	r28, 0x69	; 105
     dda:	df 4f       	sbci	r29, 0xFF	; 255
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        usbTxLen = USBPID_NAK;  /* abort pending transmit */
        if(len == 8){   /* Setup size must be always 8 bytes. Ignore otherwise. */
            uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
     ddc:	88 81       	ld	r24, Y
     dde:	80 76       	andi	r24, 0x60	; 96
            if(type == USBRQ_TYPE_STANDARD){
     de0:	09 f0       	breq	.+2      	; 0xde4 <usbPoll+0x3e>
     de2:	81 c0       	rjmp	.+258    	; 0xee6 <usbPoll+0x140>
                #define SET_REPLY_LEN(len)  replyLen = (len); usbMsgPtr = replyData
                /* This macro ensures that replyLen and usbMsgPtr are always set in the same way.
                 * That allows optimization of common code in if() branches */
                uchar *replyData = usbTxBuf + 9; /* there is 3 bytes free space at the end of the buffer */
                replyData[0] = 0;   /* common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
     de4:	10 92 81 00 	sts	0x0081, r1
                if(rq->bRequest == USBRQ_GET_STATUS){           /* 0 */
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	81 11       	cpse	r24, r1
     dec:	0b c0       	rjmp	.+22     	; 0xe04 <usbPoll+0x5e>
#endif
#if USB_CFG_HAVE_INTRIN_ENDPOINT && USB_CFG_IMPLEMENT_HALT
                    if(recipient == USBRQ_RCPT_ENDPOINT && rq->wIndex.bytes[0] == 0x81)   /* request status for endpoint 1 */
                        replyData[0] = usbTxLen1 == USBPID_STALL;
#endif
                    replyData[1] = 0;
     dee:	10 92 82 00 	sts	0x0082, r1
                    SET_REPLY_LEN(2);
     df2:	81 e8       	ldi	r24, 0x81	; 129
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	90 93 92 00 	sts	0x0092, r25
     dfa:	80 93 91 00 	sts	0x0091, r24
 * better results with an inlined function. Test condition: PowerSwitch code.
 */
static void usbProcessRx(uchar *data, uchar len)
{
usbRequest_t    *rq = (void *)data;
uchar           replyLen = 0, flags = USB_FLG_USE_DEFAULT_RW;
     dfe:	90 e8       	ldi	r25, 0x80	; 128
#if USB_CFG_HAVE_INTRIN_ENDPOINT && USB_CFG_IMPLEMENT_HALT
                    if(recipient == USBRQ_RCPT_ENDPOINT && rq->wIndex.bytes[0] == 0x81)   /* request status for endpoint 1 */
                        replyData[0] = usbTxLen1 == USBPID_STALL;
#endif
                    replyData[1] = 0;
                    SET_REPLY_LEN(2);
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	79 c0       	rjmp	.+242    	; 0xef6 <usbPoll+0x150>
                }else if(rq->bRequest == USBRQ_SET_ADDRESS){    /* 5 */
     e04:	85 30       	cpi	r24, 0x05	; 5
     e06:	21 f4       	brne	.+8      	; 0xe10 <usbPoll+0x6a>
                    usbNewDeviceAddr = rq->wValue.bytes[0];
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	80 93 94 00 	sts	0x0094, r24
     e0e:	71 c0       	rjmp	.+226    	; 0xef2 <usbPoll+0x14c>
#ifdef USB_SET_ADDRESS_HOOK
                    USB_SET_ADDRESS_HOOK();
#endif
                }else if(rq->bRequest == USBRQ_GET_DESCRIPTOR){ /* 6 */
     e10:	86 30       	cpi	r24, 0x06	; 6
     e12:	09 f0       	breq	.+2      	; 0xe16 <usbPoll+0x70>
     e14:	4c c0       	rjmp	.+152    	; 0xeae <usbPoll+0x108>
                    flags = USB_FLG_MSGPTR_IS_ROM | USB_FLG_USE_DEFAULT_RW;
                    if(rq->wValue.bytes[1] == USBDESCR_DEVICE){ /* 1 */
     e16:	8b 81       	ldd	r24, Y+3	; 0x03
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	19 f4       	brne	.+6      	; 0xe22 <usbPoll+0x7c>
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
     e1c:	8b e1       	ldi	r24, 0x1B	; 27
     e1e:	9c e0       	ldi	r25, 0x0C	; 12
     e20:	1d c0       	rjmp	.+58     	; 0xe5c <usbPoll+0xb6>
                    }else if(rq->wValue.bytes[1] == USBDESCR_CONFIG){   /* 2 */
     e22:	82 30       	cpi	r24, 0x02	; 2
     e24:	49 f4       	brne	.+18     	; 0xe38 <usbPoll+0x92>
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     e26:	89 ef       	ldi	r24, 0xF9	; 249
     e28:	9b e0       	ldi	r25, 0x0B	; 11
     e2a:	90 93 92 00 	sts	0x0092, r25
     e2e:	80 93 91 00 	sts	0x0091, r24
                    usbNewDeviceAddr = rq->wValue.bytes[0];
#ifdef USB_SET_ADDRESS_HOOK
                    USB_SET_ADDRESS_HOOK();
#endif
                }else if(rq->bRequest == USBRQ_GET_DESCRIPTOR){ /* 6 */
                    flags = USB_FLG_MSGPTR_IS_ROM | USB_FLG_USE_DEFAULT_RW;
     e32:	90 ec       	ldi	r25, 0xC0	; 192
                    if(rq->wValue.bytes[1] == USBDESCR_DEVICE){ /* 1 */
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
                    }else if(rq->wValue.bytes[1] == USBDESCR_CONFIG){   /* 2 */
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
     e34:	82 e2       	ldi	r24, 0x22	; 34
     e36:	5f c0       	rjmp	.+190    	; 0xef6 <usbPoll+0x150>
                    }else if(rq->wValue.bytes[1] == USBDESCR_STRING){   /* 3 */
     e38:	83 30       	cpi	r24, 0x03	; 3
     e3a:	19 f5       	brne	.+70     	; 0xe82 <usbPoll+0xdc>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
                        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
                            flags &= ~USB_FLG_MSGPTR_IS_ROM;
                        replyLen = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
                        if(rq->wValue.bytes[0] == 0){   /* descriptor index */
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	81 11       	cpse	r24, r1
     e40:	09 c0       	rjmp	.+18     	; 0xe54 <usbPoll+0xae>
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     e42:	8b e4       	ldi	r24, 0x4B	; 75
     e44:	9c e0       	ldi	r25, 0x0C	; 12
     e46:	90 93 92 00 	sts	0x0092, r25
     e4a:	80 93 91 00 	sts	0x0091, r24
                    usbNewDeviceAddr = rq->wValue.bytes[0];
#ifdef USB_SET_ADDRESS_HOOK
                    USB_SET_ADDRESS_HOOK();
#endif
                }else if(rq->bRequest == USBRQ_GET_DESCRIPTOR){ /* 6 */
                    flags = USB_FLG_MSGPTR_IS_ROM | USB_FLG_USE_DEFAULT_RW;
     e4e:	90 ec       	ldi	r25, 0xC0	; 192
                        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
                            flags &= ~USB_FLG_MSGPTR_IS_ROM;
                        replyLen = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
                        if(rq->wValue.bytes[0] == 0){   /* descriptor index */
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
     e50:	84 e0       	ldi	r24, 0x04	; 4
     e52:	51 c0       	rjmp	.+162    	; 0xef6 <usbPoll+0x150>
                        }else if(rq->wValue.bytes[0] == 1){
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	49 f4       	brne	.+18     	; 0xe6a <usbPoll+0xc4>
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     e58:	89 e3       	ldi	r24, 0x39	; 57
     e5a:	9c e0       	ldi	r25, 0x0C	; 12
     e5c:	90 93 92 00 	sts	0x0092, r25
     e60:	80 93 91 00 	sts	0x0091, r24
                    usbNewDeviceAddr = rq->wValue.bytes[0];
#ifdef USB_SET_ADDRESS_HOOK
                    USB_SET_ADDRESS_HOOK();
#endif
                }else if(rq->bRequest == USBRQ_GET_DESCRIPTOR){ /* 6 */
                    flags = USB_FLG_MSGPTR_IS_ROM | USB_FLG_USE_DEFAULT_RW;
     e64:	90 ec       	ldi	r25, 0xC0	; 192
                        replyLen = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
                        if(rq->wValue.bytes[0] == 0){   /* descriptor index */
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
                        }else if(rq->wValue.bytes[0] == 1){
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
     e66:	82 e1       	ldi	r24, 0x12	; 18
     e68:	46 c0       	rjmp	.+140    	; 0xef6 <usbPoll+0x150>
                        }else if(rq->wValue.bytes[0] == 2){
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	09 f0       	breq	.+2      	; 0xe70 <usbPoll+0xca>
     e6e:	3f c0       	rjmp	.+126    	; 0xeee <usbPoll+0x148>
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     e70:	8d e2       	ldi	r24, 0x2D	; 45
     e72:	9c e0       	ldi	r25, 0x0C	; 12
     e74:	90 93 92 00 	sts	0x0092, r25
     e78:	80 93 91 00 	sts	0x0091, r24
                    usbNewDeviceAddr = rq->wValue.bytes[0];
#ifdef USB_SET_ADDRESS_HOOK
                    USB_SET_ADDRESS_HOOK();
#endif
                }else if(rq->bRequest == USBRQ_GET_DESCRIPTOR){ /* 6 */
                    flags = USB_FLG_MSGPTR_IS_ROM | USB_FLG_USE_DEFAULT_RW;
     e7c:	90 ec       	ldi	r25, 0xC0	; 192
                        if(rq->wValue.bytes[0] == 0){   /* descriptor index */
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
                        }else if(rq->wValue.bytes[0] == 1){
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
                        }else if(rq->wValue.bytes[0] == 2){
                            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
     e7e:	8c e0       	ldi	r24, 0x0C	; 12
     e80:	3a c0       	rjmp	.+116    	; 0xef6 <usbPoll+0x150>
                        }else if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
                            replyLen = usbFunctionDescriptor(rq);
                        }
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
                    }else if(rq->wValue.bytes[1] == USBDESCR_HID){          /* 0x21 */
     e82:	81 32       	cpi	r24, 0x21	; 33
     e84:	49 f4       	brne	.+18     	; 0xe98 <usbPoll+0xf2>
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     e86:	8b e0       	ldi	r24, 0x0B	; 11
     e88:	9c e0       	ldi	r25, 0x0C	; 12
     e8a:	90 93 92 00 	sts	0x0092, r25
     e8e:	80 93 91 00 	sts	0x0091, r24
                    usbNewDeviceAddr = rq->wValue.bytes[0];
#ifdef USB_SET_ADDRESS_HOOK
                    USB_SET_ADDRESS_HOOK();
#endif
                }else if(rq->bRequest == USBRQ_GET_DESCRIPTOR){ /* 6 */
                    flags = USB_FLG_MSGPTR_IS_ROM | USB_FLG_USE_DEFAULT_RW;
     e92:	90 ec       	ldi	r25, 0xC0	; 192
                            replyLen = usbFunctionDescriptor(rq);
                        }
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
                    }else if(rq->wValue.bytes[1] == USBDESCR_HID){          /* 0x21 */
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
     e94:	89 e0       	ldi	r24, 0x09	; 9
     e96:	2f c0       	rjmp	.+94     	; 0xef6 <usbPoll+0x150>
                    }else if(rq->wValue.bytes[1] == USBDESCR_HID_REPORT){   /* 0x22 */
     e98:	82 32       	cpi	r24, 0x22	; 34
     e9a:	49 f5       	brne	.+82     	; 0xeee <usbPoll+0x148>
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     e9c:	8e e1       	ldi	r24, 0x1E	; 30
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	90 93 92 00 	sts	0x0092, r25
     ea4:	80 93 91 00 	sts	0x0091, r24
                    usbNewDeviceAddr = rq->wValue.bytes[0];
#ifdef USB_SET_ADDRESS_HOOK
                    USB_SET_ADDRESS_HOOK();
#endif
                }else if(rq->bRequest == USBRQ_GET_DESCRIPTOR){ /* 6 */
                    flags = USB_FLG_MSGPTR_IS_ROM | USB_FLG_USE_DEFAULT_RW;
     ea8:	90 ec       	ldi	r25, 0xC0	; 192
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
                    }else if(rq->wValue.bytes[1] == USBDESCR_HID){          /* 0x21 */
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
                    }else if(rq->wValue.bytes[1] == USBDESCR_HID_REPORT){   /* 0x22 */
                        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
     eaa:	83 e2       	ldi	r24, 0x23	; 35
     eac:	24 c0       	rjmp	.+72     	; 0xef6 <usbPoll+0x150>
#endif  /* USB_CFG_DESCR_PROPS_HID_REPORT */
                    }else if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
                        replyLen = usbFunctionDescriptor(rq);
                    }
                }else if(rq->bRequest == USBRQ_GET_CONFIGURATION){  /* 8 */
     eae:	88 30       	cpi	r24, 0x08	; 8
     eb0:	19 f4       	brne	.+6      	; 0xeb8 <usbPoll+0x112>
                    replyData = &usbConfiguration;  /* send current configuration value */
                    SET_REPLY_LEN(1);
     eb2:	86 e9       	ldi	r24, 0x96	; 150
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0a c0       	rjmp	.+20     	; 0xecc <usbPoll+0x126>
                }else if(rq->bRequest == USBRQ_SET_CONFIGURATION){  /* 9 */
     eb8:	89 30       	cpi	r24, 0x09	; 9
     eba:	21 f4       	brne	.+8      	; 0xec4 <usbPoll+0x11e>
                    usbConfiguration = rq->wValue.bytes[0];
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	80 93 96 00 	sts	0x0096, r24
     ec2:	17 c0       	rjmp	.+46     	; 0xef2 <usbPoll+0x14c>
                    usbResetStall();
                }else if(rq->bRequest == USBRQ_GET_INTERFACE){      /* 10 */
     ec4:	8a 30       	cpi	r24, 0x0A	; 10
     ec6:	49 f4       	brne	.+18     	; 0xeda <usbPoll+0x134>
                    SET_REPLY_LEN(1);
     ec8:	81 e8       	ldi	r24, 0x81	; 129
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	90 93 92 00 	sts	0x0092, r25
     ed0:	80 93 91 00 	sts	0x0091, r24
 * better results with an inlined function. Test condition: PowerSwitch code.
 */
static void usbProcessRx(uchar *data, uchar len)
{
usbRequest_t    *rq = (void *)data;
uchar           replyLen = 0, flags = USB_FLG_USE_DEFAULT_RW;
     ed4:	90 e8       	ldi	r25, 0x80	; 128
                    SET_REPLY_LEN(1);
                }else if(rq->bRequest == USBRQ_SET_CONFIGURATION){  /* 9 */
                    usbConfiguration = rq->wValue.bytes[0];
                    usbResetStall();
                }else if(rq->bRequest == USBRQ_GET_INTERFACE){      /* 10 */
                    SET_REPLY_LEN(1);
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	0e c0       	rjmp	.+28     	; 0xef6 <usbPoll+0x150>
#if USB_CFG_HAVE_INTRIN_ENDPOINT
                }else if(rq->bRequest == USBRQ_SET_INTERFACE){      /* 11 */
     eda:	8b 30       	cpi	r24, 0x0B	; 11
     edc:	51 f4       	brne	.+20     	; 0xef2 <usbPoll+0x14c>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     ede:	83 ec       	ldi	r24, 0xC3	; 195
     ee0:	80 93 83 00 	sts	0x0083, r24
     ee4:	06 c0       	rjmp	.+12     	; 0xef2 <usbPoll+0x14c>
                    /* 1: CLEAR_FEATURE, 3: SET_FEATURE, 7: SET_DESCRIPTOR */
                    /* 12: SYNCH_FRAME */
                }
                #undef SET_REPLY_LEN
            }else{  /* not a standard request -- must be vendor or class request */
                replyLen = usbFunctionSetup(data);
     ee6:	ce 01       	movw	r24, r28
     ee8:	cf de       	rcall	.-610    	; 0xc88 <usbFunctionSetup>
 * better results with an inlined function. Test condition: PowerSwitch code.
 */
static void usbProcessRx(uchar *data, uchar len)
{
usbRequest_t    *rq = (void *)data;
uchar           replyLen = 0, flags = USB_FLG_USE_DEFAULT_RW;
     eea:	90 e8       	ldi	r25, 0x80	; 128
     eec:	04 c0       	rjmp	.+8      	; 0xef6 <usbPoll+0x150>
                    usbNewDeviceAddr = rq->wValue.bytes[0];
#ifdef USB_SET_ADDRESS_HOOK
                    USB_SET_ADDRESS_HOOK();
#endif
                }else if(rq->bRequest == USBRQ_GET_DESCRIPTOR){ /* 6 */
                    flags = USB_FLG_MSGPTR_IS_ROM | USB_FLG_USE_DEFAULT_RW;
     eee:	90 ec       	ldi	r25, 0xC0	; 192
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <usbPoll+0x14e>
 * better results with an inlined function. Test condition: PowerSwitch code.
 */
static void usbProcessRx(uchar *data, uchar len)
{
usbRequest_t    *rq = (void *)data;
uchar           replyLen = 0, flags = USB_FLG_USE_DEFAULT_RW;
     ef2:	90 e8       	ldi	r25, 0x80	; 128
     ef4:	80 e0       	ldi	r24, 0x00	; 0
                    replyLen = rq->wLength.bytes[0];    /* IN transfers only */
                }
                flags &= ~USB_FLG_USE_DEFAULT_RW;  /* we have no valid msg, use user supplied read/write functions */
            }else   /* The 'else' prevents that we limit a replyLen of 0xff to the maximum transfer len. */
#endif
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])  /* limit length to max */
     ef6:	2f 81       	ldd	r18, Y+7	; 0x07
     ef8:	21 11       	cpse	r18, r1
     efa:	04 c0       	rjmp	.+8      	; 0xf04 <usbPoll+0x15e>
     efc:	2e 81       	ldd	r18, Y+6	; 0x06
     efe:	28 17       	cp	r18, r24
     f00:	08 f4       	brcc	.+2      	; 0xf04 <usbPoll+0x15e>
     f02:	82 2f       	mov	r24, r18
            }
            flags = 0;    /* start with a DATA1 package, stay with user supplied write() function */
        }
#endif
    }
    usbMsgFlags = flags;
     f04:	90 93 77 00 	sts	0x0077, r25
    usbMsgLen = replyLen;
     f08:	80 93 62 00 	sts	0x0062, r24
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len - 3);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
     f0c:	10 92 93 00 	sts	0x0093, r1
#endif
    }
    if(usbTxLen & 0x10){ /* transmit system idle */
     f10:	80 91 61 00 	lds	r24, 0x0061
     f14:	84 ff       	sbrs	r24, 4
     f16:	45 c0       	rjmp	.+138    	; 0xfa2 <usbPoll+0x1fc>
        if(usbMsgLen != 0xff){  /* transmit data pending? */
     f18:	80 91 62 00 	lds	r24, 0x0062
     f1c:	8f 3f       	cpi	r24, 0xFF	; 255
     f1e:	09 f4       	brne	.+2      	; 0xf22 <usbPoll+0x17c>
     f20:	40 c0       	rjmp	.+128    	; 0xfa2 <usbPoll+0x1fc>
     f22:	c8 2f       	mov	r28, r24
     f24:	89 30       	cpi	r24, 0x09	; 9
     f26:	08 f0       	brcs	.+2      	; 0xf2a <usbPoll+0x184>
     f28:	c8 e0       	ldi	r28, 0x08	; 8
uchar   wantLen, len, txLen, token;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
     f2a:	8c 1b       	sub	r24, r28
     f2c:	80 93 62 00 	sts	0x0062, r24
    token = USBPID_DATA1;
    if(usbMsgFlags & USB_FLG_TX_PACKET)
     f30:	20 91 77 00 	lds	r18, 0x0077
     f34:	20 fd       	sbrc	r18, 0
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <usbPoll+0x196>

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    token = USBPID_DATA1;
     f38:	db e4       	ldi	r29, 0x4B	; 75
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <usbPoll+0x198>
    if(usbMsgFlags & USB_FLG_TX_PACKET)
        token = USBPID_DATA0;
     f3c:	d3 ec       	ldi	r29, 0xC3	; 195
    usbMsgFlags++;
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	20 93 77 00 	sts	0x0077, r18
static uchar usbRead(uchar *data, uchar len)
{
#if USB_CFG_IMPLEMENT_FN_READ
    if(usbMsgFlags & USB_FLG_USE_DEFAULT_RW){
#endif
        uchar i = len, *r = usbMsgPtr;
     f44:	80 91 91 00 	lds	r24, 0x0091
     f48:	90 91 92 00 	lds	r25, 0x0092
        if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     f4c:	26 fd       	sbrc	r18, 6
     f4e:	05 c0       	rjmp	.+10     	; 0xf5a <usbPoll+0x1b4>
     f50:	fc 01       	movw	r30, r24
     f52:	a9 e7       	ldi	r26, 0x79	; 121
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	2c 2f       	mov	r18, r28
     f58:	0a c0       	rjmp	.+20     	; 0xf6e <usbPoll+0x1c8>
     f5a:	a9 e7       	ldi	r26, 0x79	; 121
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	fc 01       	movw	r30, r24
     f60:	2c 2f       	mov	r18, r28
            while(i--){
     f62:	21 50       	subi	r18, 0x01	; 1
     f64:	48 f0       	brcs	.+18     	; 0xf78 <usbPoll+0x1d2>
                uchar c = PRG_RDB(r);    /* assign to char size variable to enforce byte ops */
     f66:	34 91       	lpm	r19, Z
                *data++ = c;
     f68:	3d 93       	st	X+, r19
                r++;
     f6a:	31 96       	adiw	r30, 0x01	; 1
     f6c:	fa cf       	rjmp	.-12     	; 0xf62 <usbPoll+0x1bc>
            }
        }else{                  /* RAM data */
            while(i--)
     f6e:	21 50       	subi	r18, 0x01	; 1
     f70:	18 f0       	brcs	.+6      	; 0xf78 <usbPoll+0x1d2>
                *data++ = *r++;
     f72:	31 91       	ld	r19, Z+
     f74:	3d 93       	st	X+, r19
     f76:	fb cf       	rjmp	.-10     	; 0xf6e <usbPoll+0x1c8>
     f78:	8c 0f       	add	r24, r28
     f7a:	91 1d       	adc	r25, r1
        }
        usbMsgPtr = r;
     f7c:	90 93 92 00 	sts	0x0092, r25
     f80:	80 93 91 00 	sts	0x0091, r24
    if(usbMsgFlags & USB_FLG_TX_PACKET)
        token = USBPID_DATA0;
    usbMsgFlags++;
    len = usbRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
     f84:	6c 2f       	mov	r22, r28
     f86:	89 e7       	ldi	r24, 0x79	; 121
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	43 d0       	rcall	.+134    	; 0x1012 <usbCrc16Append>
        txLen = len + 4;    /* length including sync byte */
     f8c:	84 e0       	ldi	r24, 0x04	; 4
     f8e:	8c 0f       	add	r24, r28
        if(len < 8)         /* a partial package identifies end of message */
     f90:	c8 30       	cpi	r28, 0x08	; 8
     f92:	19 f0       	breq	.+6      	; 0xf9a <usbPoll+0x1f4>
            usbMsgLen = 0xff;
     f94:	9f ef       	ldi	r25, 0xFF	; 255
     f96:	90 93 62 00 	sts	0x0062, r25
    }else{
        txLen = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = 0xff;
    }
    usbTxBuf[0] = token;
     f9a:	d0 93 78 00 	sts	0x0078, r29
    usbTxLen = txLen;
     f9e:	80 93 61 00 	sts	0x0061, r24
{
#if USB_CFG_IMPLEMENT_FN_READ
    if(usbMsgFlags & USB_FLG_USE_DEFAULT_RW){
#endif
        uchar i = len, *r = usbMsgPtr;
        if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
     fa2:	8a e0       	ldi	r24, 0x0A	; 10
/* We want to do
 *     return (USBIN & USBMASK);
 * here, but the compiler does int-expansion acrobatics.
 * We can avoid this by assigning to a char-sized variable.
 */
    rval = USBIN & USBMASK;
     fa4:	96 b3       	in	r25, 0x16	; 22
     fa6:	96 70       	andi	r25, 0x06	; 6
        if(usbMsgLen != 0xff){  /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 10; i > 0; i--){
        if(isNotSE0())
     fa8:	31 f4       	brne	.+12     	; 0xfb6 <usbPoll+0x210>
    if(usbTxLen & 0x10){ /* transmit system idle */
        if(usbMsgLen != 0xff){  /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 10; i > 0; i--){
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	d9 f7       	brne	.-10     	; 0xfa4 <usbPoll+0x1fe>
        if(isNotSE0())
            break;
    }
    if(i == 0){ /* RESET condition, called multiple times during reset */
        usbNewDeviceAddr = 0;
     fae:	10 92 94 00 	sts	0x0094, r1
        usbDeviceAddr = 0;
     fb2:	10 92 8e 00 	sts	0x008E, r1

static inline void usbHandleResetHook(uchar notResetState)
{
#ifdef USB_RESET_HOOK
static uchar    wasReset;
uchar           isReset = !notResetState;
     fb6:	c1 e0       	ldi	r28, 0x01	; 1
     fb8:	81 11       	cpse	r24, r1
     fba:	c0 e0       	ldi	r28, 0x00	; 0

    if(wasReset != isReset){
     fbc:	80 91 76 00 	lds	r24, 0x0076
     fc0:	8c 17       	cp	r24, r28
     fc2:	29 f0       	breq	.+10     	; 0xfce <usbPoll+0x228>
        USB_RESET_HOOK(isReset);
     fc4:	c1 11       	cpse	r28, r1
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <usbPoll+0x224>
     fc8:	89 de       	rcall	.-750    	; 0xcdc <usbEventResetReady>
        wasReset = isReset;
     fca:	c0 93 76 00 	sts	0x0076, r28
        usbDeviceAddr = 0;
        usbResetStall();
        DBG1(0xff, 0, 0);
    }
    usbHandleResetHook(i);
}
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
     fd4:	85 b7       	in	r24, 0x35	; 53
     fd6:	83 60       	ori	r24, 0x03	; 3
     fd8:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
     fda:	8b b7       	in	r24, 0x3b	; 59
     fdc:	80 64       	ori	r24, 0x40	; 64
     fde:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
     fe0:	83 ec       	ldi	r24, 0xC3	; 195
     fe2:	80 93 83 00 	sts	0x0083, r24
     fe6:	08 95       	ret

00000fe8 <usbCrc16>:
;   r20/21: polynomial
;   r23: scratch
;   r24/25: crc-sum
;   r26/27=X: ptr
usbCrc16:
    mov     ptrL, argPtrL
     fe8:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
     fea:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
     fec:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
     ff0:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
     ff2:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1
     ff4:	60 95       	com	r22

00000ff6 <crcByteLoop>:
crcByteLoop:
    subi    argLen, -1
     ff6:	6f 5f       	subi	r22, 0xFF	; 255
    brcc    crcReady    ; modified loop to ensure that carry is set below
     ff8:	58 f4       	brcc	.+22     	; 0x1010 <crcReady>
    ld      byte, ptr+
     ffa:	2d 91       	ld	r18, X+
    ldi     bitCnt, -8  ; strange loop counter to ensure that carry is set where we need it
     ffc:	38 ef       	ldi	r19, 0xF8	; 248
    eor     resCrcL, byte
     ffe:	82 27       	eor	r24, r18

00001000 <crcBitLoop>:
crcBitLoop:
    ror     resCrcH     ; carry is always set here
    1000:	97 95       	ror	r25
    ror     resCrcL
    1002:	87 95       	ror	r24
    brcs    crcNoXor
    1004:	10 f0       	brcs	.+4      	; 0x100a <crcNoXor>
    eor     resCrcL, polyL
    1006:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
    1008:	95 27       	eor	r25, r21

0000100a <crcNoXor>:
crcNoXor:
    subi    bitCnt, -1
    100a:	3f 5f       	subi	r19, 0xFF	; 255
    brcs    crcBitLoop
    100c:	c8 f3       	brcs	.-14     	; 0x1000 <crcBitLoop>
    rjmp    crcByteLoop
    100e:	f3 cf       	rjmp	.-26     	; 0xff6 <crcByteLoop>

00001010 <crcReady>:
crcReady:
    ret
    1010:	08 95       	ret

00001012 <usbCrc16Append>:
; Thanks to Reimar Doeffinger for optimizing this CRC routine!

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
    1012:	ea df       	rcall	.-44     	; 0xfe8 <usbCrc16>
    st      ptr+, resCrcL
    1014:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
    1016:	9d 93       	st	X+, r25
    ret
    1018:	08 95       	ret

0000101a <usbMeasureFrameLength>:

; extern unsigned usbMeasurePacketLength(void);
; returns time between two idle strobes in multiples of 7 CPU clocks
.global usbMeasureFrameLength
usbMeasureFrameLength:
    ldi     cntH, 6         ; wait ~ 10 ms for D- == 0
    101a:	a6 e0       	ldi	r26, 0x06	; 6
    clr     cnt16L
    101c:	88 27       	eor	r24, r24
    clr     cnt16H
    101e:	99 27       	eor	r25, r25

00001020 <usbMFTime16>:
usbMFTime16:
    dec     cntH
    1020:	aa 95       	dec	r26
    breq    usbMFTimeout
    1022:	69 f0       	breq	.+26     	; 0x103e <usbMFTimeout>

00001024 <usbMFWaitStrobe>:
usbMFWaitStrobe:            ; first wait for D- == 0 (idle strobe)
    sbiw    cnt16, 1        ;[0] [6]
    1024:	01 97       	sbiw	r24, 0x01	; 1
    breq    usbMFTime16     ;[2]
    1026:	e1 f3       	breq	.-8      	; 0x1020 <usbMFTime16>
    sbic    USBIN, USBMINUS ;[3]
    1028:	b1 99       	sbic	0x16, 1	; 22
    rjmp    usbMFWaitStrobe ;[4]
    102a:	fc cf       	rjmp	.-8      	; 0x1024 <usbMFWaitStrobe>

0000102c <usbMFWaitIdle>:
usbMFWaitIdle:              ; then wait until idle again
    sbis    USBIN, USBMINUS ;1 wait for D- == 1
    102c:	b1 9b       	sbis	0x16, 1	; 22
    rjmp    usbMFWaitIdle   ;2
    102e:	fe cf       	rjmp	.-4      	; 0x102c <usbMFWaitIdle>
    ldi     cnt16L, 1       ;1 represents cycles so far
    1030:	81 e0       	ldi	r24, 0x01	; 1
    clr     cnt16H          ;1
    1032:	99 27       	eor	r25, r25

00001034 <usbMFWaitLoop>:
usbMFWaitLoop:
    in      cntH, USBIN     ;[0] [7]
    1034:	a6 b3       	in	r26, 0x16	; 22
    adiw    cnt16, 1        ;[1]
    1036:	01 96       	adiw	r24, 0x01	; 1
    breq    usbMFTimeout    ;[3]
    1038:	11 f0       	breq	.+4      	; 0x103e <usbMFTimeout>
    andi    cntH, USBMASK   ;[4]
    103a:	a6 70       	andi	r26, 0x06	; 6
    brne    usbMFWaitLoop   ;[5]
    103c:	d9 f7       	brne	.-10     	; 0x1034 <usbMFWaitLoop>

0000103e <usbMFTimeout>:
usbMFTimeout:
#if resL != cnt16L
    mov     resL, cnt16L
    mov     resH, cnt16H
#endif
    ret
    103e:	08 95       	ret

00001040 <__vector_1>:
; when instruction starts


USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], r0, YH, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-23] push only what is necessary to sync with edge ASAP
    1040:	cf 93       	push	r28
    in      YL, SREG            ;[-21]
    1042:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-20]
    1044:	cf 93       	push	r28

00001046 <waitForJ>:
;----------------------------------------------------------------------------
;sync byte (D-) pattern LSb to MSb: 01010100 [1 = idle = J, 0 = K]
;sync up with J to K edge during sync pattern -- use fastest possible loops
;first part has no timeout because it waits for IDLE or SE1 (== disconnected)
waitForJ:
    sbis    USBIN, USBMINUS     ;[-18] wait for D- == 1
    1046:	b1 9b       	sbis	0x16, 1	; 22
    rjmp    waitForJ
    1048:	fe cf       	rjmp	.-4      	; 0x1046 <waitForJ>

0000104a <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
    104a:	b1 9b       	sbis	0x16, 1	; 22
    rjmp    foundK              ;[-14]
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <foundK>
    sbis    USBIN, USBMINUS
    104e:	b1 9b       	sbis	0x16, 1	; 22
    rjmp    foundK
    1050:	09 c0       	rjmp	.+18     	; 0x1064 <foundK>
    sbis    USBIN, USBMINUS
    1052:	b1 9b       	sbis	0x16, 1	; 22
    rjmp    foundK
    1054:	07 c0       	rjmp	.+14     	; 0x1064 <foundK>
    sbis    USBIN, USBMINUS
    1056:	b1 9b       	sbis	0x16, 1	; 22
    rjmp    foundK
    1058:	05 c0       	rjmp	.+10     	; 0x1064 <foundK>
    sbis    USBIN, USBMINUS
    105a:	b1 9b       	sbis	0x16, 1	; 22
    rjmp    foundK
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <foundK>
    sbis    USBIN, USBMINUS
    105e:	b1 9b       	sbis	0x16, 1	; 22
    rjmp    foundK
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <foundK>
#if USB_COUNT_SOF
    lds     YL, usbSofCount
    inc     YL
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
    rjmp    sofError
    1062:	d5 c0       	rjmp	.+426    	; 0x120e <sofError>

00001064 <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    r0                  ;[-12]
    1064:	0f 92       	push	r0
;   [---]                       ;[-11]
    push    YH                  ;[-10]
    1066:	df 93       	push	r29
;   [---]                       ;[-9]
    lds     YL, usbInputBufOffset;[-8]
    1068:	c0 91 90 00 	lds	r28, 0x0090
;   [---]                       ;[-7]
    clr     YH                  ;[-6]
    106c:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-5] [rx loop init]
    106e:	c9 56       	subi	r28, 0x69	; 105
    sbci    YH, hi8(-(usbRxBuf));[-4] [rx loop init]
    1070:	df 4f       	sbci	r29, 0xFF	; 255
    mov     r0, x2              ;[-3] [rx loop init]
    1072:	01 2e       	mov	r0, r17
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
    1074:	b1 9b       	sbis	0x16, 1	; 22
    rjmp    haveTwoBitsK        ;[-1]
    1076:	03 c0       	rjmp	.+6      	; 0x107e <haveTwoBitsK>
    pop     YH                  ;[0] undo the pushes from before
    1078:	df 91       	pop	r29
    pop     r0                  ;[2]
    107a:	0f 90       	pop	r0
    rjmp    waitForK            ;[4] this was not the end of sync, retry
    107c:	e6 cf       	rjmp	.-52     	; 0x104a <waitForK>

0000107e <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:               ;[1]
    push    shift           ;[1]
    107e:	2f 93       	push	r18
    push    x1              ;[3]
    1080:	0f 93       	push	r16
    push    x2              ;[5]
    1082:	1f 93       	push	r17
    push    x3              ;[7]
    1084:	4f 93       	push	r20
    ldi     shift, 0xff     ;[9] [rx loop init]
    1086:	2f ef       	ldi	r18, 0xFF	; 255
    ori     x3, 0xff        ;[10] [rx loop init] == ser x3, clear zero flag
    1088:	4f 6f       	ori	r20, 0xFF	; 255

    in      x1, USBIN       ;[11] <-- sample bit 0
    108a:	06 b3       	in	r16, 0x16	; 22
    bst     x1, USBMINUS    ;[12]
    108c:	01 fb       	bst	r16, 1
    bld     shift, 0        ;[13]
    108e:	20 f9       	bld	r18, 0
    push    x4              ;[14] == phase
    1090:	5f 93       	push	r21
;   [---]                   ;[15]
    push    cnt             ;[16]
    1092:	3f 93       	push	r19
;   [---]                   ;[17]
    ldi     phase, 0        ;[18] [rx loop init]
    1094:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[19] [rx loop init]
    1096:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[20]
    1098:	65 c0       	rjmp	.+202    	; 0x1164 <rxbit1>

0000109a <continueWithBit5>:
bit 7: jump, fixup bitstuff
; 87 [+ 2] cycles
------------------------------------------------------------------
*/
continueWithBit5:
    in      x2, USBIN       ;[055] <-- bit 5
    109a:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[056]
    109c:	01 26       	eor	r0, r17
    or      phase, r0       ;[057]
    109e:	50 29       	or	r21, r0
    sbrc    phase, USBMINUS ;[058]
    10a0:	51 fd       	sbrc	r21, 1
    lpm                     ;[059] optional nop3; modifies r0
    10a2:	c8 95       	lpm
    in      phase, USBIN    ;[060] <-- phase
    10a4:	56 b3       	in	r21, 0x16	; 22
    eor     x1, x2          ;[061]
    10a6:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[062]
    10a8:	01 fb       	bst	r16, 1
    bld     shift, 5        ;[063]
    10aa:	25 f9       	bld	r18, 5
    andi    shift, 0x3f     ;[064]
    10ac:	2f 73       	andi	r18, 0x3F	; 63
    in      x1, USBIN       ;[065] <-- bit 6
    10ae:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff5        ;[066] *** unstuff escape
    10b0:	b1 f0       	breq	.+44     	; 0x10de <unstuff5>
    eor     phase, x1       ;[067]
    10b2:	50 27       	eor	r21, r16
    eor     x2, x1          ;[068]
    10b4:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[069]
    10b6:	11 fb       	bst	r17, 1
    bld     shift, 6        ;[070]
    10b8:	26 f9       	bld	r18, 6

000010ba <didUnstuff6>:
didUnstuff6:                ;[   ]
    in      r0, USBIN       ;[071] <-- phase
    10ba:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x02     ;[072]
    10bc:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6        ;[073] *** unstuff escape
    10be:	f0 f0       	brcs	.+60     	; 0x10fc <unstuff6>

000010c0 <didUnstuff5>:
didUnstuff5:                ;[   ]
    nop2                    ;[074]
    10c0:	00 c0       	rjmp	.+0      	; 0x10c2 <didUnstuff5+0x2>
;   [---]                   ;[075]
    in      x2, USBIN       ;[076] <-- bit 7
    10c2:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2          ;[077]
    10c4:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[078]
    10c6:	01 fb       	bst	r16, 1
    bld     shift, 7        ;[079]
    10c8:	27 f9       	bld	r18, 7

000010ca <didUnstuff7>:
didUnstuff7:                ;[   ]
    eor     r0, x2          ;[080]
    10ca:	01 26       	eor	r0, r17
    or      phase, r0       ;[081]
    10cc:	50 29       	or	r21, r0
    in      r0, USBIN       ;[082] <-- phase
    10ce:	06 b2       	in	r0, 0x16	; 22
    cpi     shift, 0x04     ;[083]
    10d0:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop          ;[084]
    10d2:	e8 f5       	brcc	.+122    	; 0x114e <rxLoop>

000010d4 <unstuff7>:
;   [---]                   ;[085]
unstuff7:                   ;[   ]
    andi    x3, ~0x80       ;[085]
    10d4:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80     ;[086]
    10d6:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN       ;[087] <-- sample stuffed bit 7
    10d8:	16 b3       	in	r17, 0x16	; 22
    nop                     ;[088]
    10da:	00 00       	nop
    rjmp    didUnstuff7     ;[089]
    10dc:	f6 cf       	rjmp	.-20     	; 0x10ca <didUnstuff7>

000010de <unstuff5>:
;   [---]                   ;[090]
                            ;[080]

unstuff5:                   ;[067]
    eor     phase, x1       ;[068]
    10de:	50 27       	eor	r21, r16
    andi    x3, ~0x20       ;[069]
    10e0:	4f 7d       	andi	r20, 0xDF	; 223
    ori     shift, 0x20     ;[070]
    10e2:	20 62       	ori	r18, 0x20	; 32
    in      r0, USBIN       ;[071] <-- phase
    10e4:	06 b2       	in	r0, 0x16	; 22
    mov     x2, x1          ;[072]
    10e6:	10 2f       	mov	r17, r16
    nop                     ;[073]
    10e8:	00 00       	nop
    nop2                    ;[074]
    10ea:	00 c0       	rjmp	.+0      	; 0x10ec <unstuff5+0xe>
;   [---]                   ;[075]
    in      x1, USBIN       ;[076] <-- bit 6
    10ec:	06 b3       	in	r16, 0x16	; 22
    eor     r0, x1          ;[077]
    10ee:	00 26       	eor	r0, r16
    or      phase, r0       ;[078]
    10f0:	50 29       	or	r21, r0
    eor     x2, x1          ;[079]
    10f2:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[080]
    10f4:	11 fb       	bst	r17, 1
    bld     shift, 6        ;[081] no need to check bitstuffing, we just had one
    10f6:	26 f9       	bld	r18, 6
    in      r0, USBIN       ;[082] <-- phase
    10f8:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff5     ;[083]
    10fa:	e2 cf       	rjmp	.-60     	; 0x10c0 <didUnstuff5>

000010fc <unstuff6>:
;   [---]                   ;[084]
                            ;[074]

unstuff6:                   ;[074]
    andi    x3, ~0x40       ;[075]
    10fc:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN       ;[076] <-- bit 6 again
    10fe:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40     ;[077]
    1100:	20 64       	ori	r18, 0x40	; 64
    nop2                    ;[078]
    1102:	00 c0       	rjmp	.+0      	; 0x1104 <unstuff6+0x8>
;   [---]                   ;[079]
    rjmp    didUnstuff6     ;[080]
    1104:	da cf       	rjmp	.-76     	; 0x10ba <didUnstuff6>

00001106 <unstuff0>:
;   [---]                   ;[081]
                            ;[071]

unstuff0:                   ;[013]
    eor     r0, x2          ;[014]
    1106:	01 26       	eor	r0, r17
    or      phase, r0       ;[015]
    1108:	50 29       	or	r21, r0
    andi    x2, USBMASK     ;[016] check for SE0
    110a:	16 70       	andi	r17, 0x06	; 6
    in      r0, USBIN       ;[017] <-- phase
    110c:	06 b2       	in	r0, 0x16	; 22
    breq    didUnstuff0     ;[018] direct jump to se0 would be too long
    110e:	69 f1       	breq	.+90     	; 0x116a <didUnstuff0>
    andi    x3, ~0x01       ;[019]
    1110:	4e 7f       	andi	r20, 0xFE	; 254
    ori     shift, 0x01     ;[020]
    1112:	21 60       	ori	r18, 0x01	; 1
    mov     x1, x2          ;[021] mov existing sample
    1114:	01 2f       	mov	r16, r17
    in      x2, USBIN       ;[022] <-- bit 1 again
    1116:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff0     ;[023]
    1118:	28 c0       	rjmp	.+80     	; 0x116a <didUnstuff0>

0000111a <unstuff1>:
;   [---]                   ;[024]
                            ;[014]

unstuff1:                   ;[024]
    eor     r0, x1          ;[025]
    111a:	00 26       	eor	r0, r16
    or      phase, r0       ;[026]
    111c:	50 29       	or	r21, r0
    andi    x3, ~0x02       ;[027]
    111e:	4d 7f       	andi	r20, 0xFD	; 253
    in      r0, USBIN       ;[028] <-- phase
    1120:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x02     ;[029]
    1122:	22 60       	ori	r18, 0x02	; 2
    mov     x2, x1          ;[030]
    1124:	10 2f       	mov	r17, r16
    rjmp    didUnstuff1     ;[031]
    1126:	29 c0       	rjmp	.+82     	; 0x117a <didUnstuff1>

00001128 <unstuff2>:
;   [---]                   ;[032]
                            ;[022]

unstuff2:                   ;[035]
    eor     r0, x2          ;[036]
    1128:	01 26       	eor	r0, r17
    or      phase, r0       ;[037]
    112a:	50 29       	or	r21, r0
    andi    x3, ~0x04       ;[038]
    112c:	4b 7f       	andi	r20, 0xFB	; 251
    in      r0, USBIN       ;[039] <-- phase
    112e:	06 b2       	in	r0, 0x16	; 22
    ori     shift, 0x04     ;[040]
    1130:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2          ;[041]
    1132:	01 2f       	mov	r16, r17
    rjmp    didUnstuff2     ;[042]
    1134:	2d c0       	rjmp	.+90     	; 0x1190 <didUnstuff2>

00001136 <unstuff3>:
;   [---]                   ;[043]
                            ;[033]

unstuff3:                   ;[043]
    in      x2, USBIN       ;[044] <-- bit 3 again
    1136:	16 b3       	in	r17, 0x16	; 22
    eor     r0, x2          ;[045]
    1138:	01 26       	eor	r0, r17
    or      phase, r0       ;[046]
    113a:	50 29       	or	r21, r0
    andi    x3, ~0x08       ;[047]
    113c:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08     ;[048]
    113e:	28 60       	ori	r18, 0x08	; 8
    nop                     ;[049]
    1140:	00 00       	nop
    in      r0, USBIN       ;[050] <-- phase
    1142:	06 b2       	in	r0, 0x16	; 22
    rjmp    didUnstuff3     ;[051]
    1144:	2e c0       	rjmp	.+92     	; 0x11a2 <didUnstuff3>

00001146 <unstuff4>:
;   [---]                   ;[052]
                            ;[042]

unstuff4:                   ;[053]
    andi    x3, ~0x10       ;[054]
    1146:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN       ;[055] <-- bit 4 again
    1148:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10     ;[056]
    114a:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4     ;[057]
    114c:	30 c0       	rjmp	.+96     	; 0x11ae <didUnstuff4>

0000114e <rxLoop>:
;   [---]                   ;[058]
                            ;[048]

rxLoop:                     ;[085]
    eor     x3, shift       ;[086] reconstruct: x3 is 0 at bit locations we changed, 1 at others
    114e:	42 27       	eor	r20, r18
    in      x1, USBIN       ;[000] <-- bit 0
    1150:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3          ;[001]
    1152:	49 93       	st	Y+, r20
;   [---]                   ;[002]
    eor     r0, x1          ;[003]
    1154:	00 26       	eor	r0, r16
    or      phase, r0       ;[004]
    1156:	50 29       	or	r21, r0
    eor     x2, x1          ;[005]
    1158:	10 27       	eor	r17, r16
    in      r0, USBIN       ;[006] <-- phase
    115a:	06 b2       	in	r0, 0x16	; 22
    ser     x3              ;[007]
    115c:	4f ef       	ldi	r20, 0xFF	; 255
    bst     x2, USBMINUS    ;[008]
    115e:	11 fb       	bst	r17, 1
    bld     shift, 0        ;[009]
    1160:	20 f9       	bld	r18, 0
    andi    shift, 0xf9     ;[010]
    1162:	29 7f       	andi	r18, 0xF9	; 249

00001164 <rxbit1>:
rxbit1:                     ;[   ]
    in      x2, USBIN       ;[011] <-- bit 1
    1164:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff0        ;[012] *** unstuff escape
    1166:	79 f2       	breq	.-98     	; 0x1106 <unstuff0>
    andi    x2, USBMASK     ;[013] SE0 check for bit 1
    1168:	16 70       	andi	r17, 0x06	; 6

0000116a <didUnstuff0>:
didUnstuff0:                ;[   ] Z only set if we detected SE0 in bitstuff
    breq    se0             ;[014]
    116a:	59 f1       	breq	.+86     	; 0x11c2 <se0>
    eor     r0, x2          ;[015]
    116c:	01 26       	eor	r0, r17
    or      phase, r0       ;[016]
    116e:	50 29       	or	r21, r0
    in      r0, USBIN       ;[017] <-- phase
    1170:	06 b2       	in	r0, 0x16	; 22
    eor     x1, x2          ;[018]
    1172:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[019]
    1174:	01 fb       	bst	r16, 1
    bld     shift, 1        ;[020]
    1176:	21 f9       	bld	r18, 1
    andi    shift, 0xf3     ;[021]
    1178:	23 7f       	andi	r18, 0xF3	; 243

0000117a <didUnstuff1>:
didUnstuff1:                ;[   ]
    in      x1, USBIN       ;[022] <-- bit 2
    117a:	06 b3       	in	r16, 0x16	; 22
    breq    unstuff1        ;[023] *** unstuff escape
    117c:	71 f2       	breq	.-100    	; 0x111a <unstuff1>
    eor     r0, x1          ;[024]
    117e:	00 26       	eor	r0, r16
    or      phase, r0       ;[025]
    1180:	50 29       	or	r21, r0
    subi    cnt, 1          ;[026] overflow check
    1182:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow        ;[027]
    1184:	d0 f0       	brcs	.+52     	; 0x11ba <overflow>
    in      r0, USBIN       ;[028] <-- phase
    1186:	06 b2       	in	r0, 0x16	; 22
    eor     x2, x1          ;[029]
    1188:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[030]
    118a:	11 fb       	bst	r17, 1
    bld     shift, 2        ;[031]
    118c:	22 f9       	bld	r18, 2
    andi    shift, 0xe7     ;[032]
    118e:	27 7e       	andi	r18, 0xE7	; 231

00001190 <didUnstuff2>:
didUnstuff2:                ;[   ]
    in      x2, USBIN       ;[033] <-- bit 3
    1190:	16 b3       	in	r17, 0x16	; 22
    breq    unstuff2        ;[034] *** unstuff escape
    1192:	51 f2       	breq	.-108    	; 0x1128 <unstuff2>
    eor     r0, x2          ;[035]
    1194:	01 26       	eor	r0, r17
    or      phase, r0       ;[036]
    1196:	50 29       	or	r21, r0
    eor     x1, x2          ;[037]
    1198:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;[038]
    119a:	01 fb       	bst	r16, 1
    in      r0, USBIN       ;[039] <-- phase
    119c:	06 b2       	in	r0, 0x16	; 22
    bld     shift, 3        ;[040]
    119e:	23 f9       	bld	r18, 3
    andi    shift, 0xcf     ;[041]
    11a0:	2f 7c       	andi	r18, 0xCF	; 207

000011a2 <didUnstuff3>:
didUnstuff3:                ;[   ]
    breq    unstuff3        ;[042] *** unstuff escape
    11a2:	49 f2       	breq	.-110    	; 0x1136 <unstuff3>
    nop                     ;[043]
    11a4:	00 00       	nop
    in      x1, USBIN       ;[044] <-- bit 4
    11a6:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1          ;[045]
    11a8:	10 27       	eor	r17, r16
    bst     x2, USBMINUS    ;[046]
    11aa:	11 fb       	bst	r17, 1
    bld     shift, 4        ;[047]
    11ac:	24 f9       	bld	r18, 4

000011ae <didUnstuff4>:
didUnstuff4:                ;[   ]
    eor     r0, x1          ;[048]
    11ae:	00 26       	eor	r0, r16
    or      phase, r0       ;[049]
    11b0:	50 29       	or	r21, r0
    in      r0, USBIN       ;[050] <-- phase
    11b2:	06 b2       	in	r0, 0x16	; 22
    andi    shift, 0x9f     ;[051]
    11b4:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4        ;[052] *** unstuff escape
    11b6:	39 f2       	breq	.-114    	; 0x1146 <unstuff4>
    rjmp    continueWithBit5;[053]
    11b8:	70 cf       	rjmp	.-288    	; 0x109a <continueWithBit5>

000011ba <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
    11ba:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
    11bc:	1a bf       	out	0x3a, r17	; 58

000011be <ignorePacket>:
ignorePacket:
    clr     token
    11be:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
    11c0:	19 c0       	rjmp	.+50     	; 0x11f4 <handleSetupOrOut>

000011c2 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
    11c2:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
    11c4:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
    11c6:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
    11c8:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
    11ca:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
    11cc:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
    11ce:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
    11d0:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
    11d2:	09 f1       	breq	.+66     	; 0x1216 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
    11d4:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
    11d6:	f9 f0       	breq	.+62     	; 0x1216 <handleData>
    lds     shift, usbDeviceAddr;[17]
    11d8:	20 91 8e 00 	lds	r18, 0x008E
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
    11dc:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
    11de:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
    11e0:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
    11e2:	ed cf       	rjmp	.-38     	; 0x11be <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
    11e4:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
    11e6:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
    11e8:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
    11ea:	51 f1       	breq	.+84     	; 0x1240 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
    11ec:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
    11ee:	11 f0       	breq	.+4      	; 0x11f4 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
    11f0:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
    11f2:	29 f7       	brne	.-54     	; 0x11be <ignorePacket>

000011f4 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
    11f4:	00 93 95 00 	sts	0x0095, r16

000011f8 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
    11f8:	3f 91       	pop	r19
    11fa:	5f 91       	pop	r21
    11fc:	4f 91       	pop	r20
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	2f 91       	pop	r18
    1204:	df 91       	pop	r29
    1206:	0f 90       	pop	r0
    USB_LOAD_PENDING(YL)        ;[49]
    1208:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
    120a:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
    120c:	1c cf       	rjmp	.-456    	; 0x1046 <waitForJ>

0000120e <sofError>:
sofError:
    POP_RETI                    ;macro call
    120e:	cf 91       	pop	r28
    1210:	cf bf       	out	0x3f, r28	; 63
    1212:	cf 91       	pop	r28
    reti
    1214:	18 95       	reti

00001216 <handleData>:

handleData:
    lds     token, usbCurrentTok;[18]
    1216:	00 91 95 00 	lds	r16, 0x0095
    tst     token               ;[20]
    121a:	00 23       	and	r16, r16
    breq    doReturn            ;[21]
    121c:	69 f3       	breq	.-38     	; 0x11f8 <doReturn>
    lds     x2, usbRxLen        ;[22]
    121e:	10 91 93 00 	lds	r17, 0x0093
    tst     x2                  ;[24]
    1222:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
    1224:	79 f5       	brne	.+94     	; 0x1284 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
    1226:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
    1228:	7a f1       	brmi	.+94     	; 0x1288 <sendAckAndReti>
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
    122a:	30 93 93 00 	sts	0x0093, r19
    sts     usbRxToken, token   ;[30]
    122e:	00 93 8f 00 	sts	0x008F, r16
    lds     x2, usbInputBufOffset;[32] swap buffers
    1232:	10 91 90 00 	lds	r17, 0x0090
    ldi     cnt, USB_BUFSIZE    ;[34]
    1236:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
    1238:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
    123a:	30 93 90 00 	sts	0x0090, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
    123e:	24 c0       	rjmp	.+72     	; 0x1288 <sendAckAndReti>

00001240 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
    1240:	00 91 93 00 	lds	r16, 0x0093
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
    1244:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
    1246:	f4 f4       	brge	.+60     	; 0x1284 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
    1248:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
    124a:	4f 70       	andi	r20, 0x0F	; 15
    brne    handleIn1           ;[36]
    124c:	49 f4       	brne	.+18     	; 0x1260 <handleIn1>
#endif
    lds     cnt, usbTxLen       ;[37]
    124e:	30 91 61 00 	lds	r19, 0x0061
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
    1252:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
    1254:	1a c0       	rjmp	.+52     	; 0x128a <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
    1256:	00 93 61 00 	sts	0x0061, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
    125a:	c8 e7       	ldi	r28, 0x78	; 120
    ldi     YH, hi8(usbTxBuf)   ;[44]
    125c:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
    125e:	19 c0       	rjmp	.+50     	; 0x1292 <usbSendAndReti>

00001260 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
    1260:	30 91 60 00 	lds	r19, 0x0060
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
    1264:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
    1266:	11 c0       	rjmp	.+34     	; 0x128a <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
    1268:	00 93 60 00 	sts	0x0060, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
    126c:	c3 e8       	ldi	r28, 0x83	; 131
    ldi     YH, hi8(usbTxBuf1)  ;[47]
    126e:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
    1270:	10 c0       	rjmp	.+32     	; 0x1292 <usbSendAndReti>

00001272 <bitstuff7>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuff7:
    eor     x1, x4          ;[4]
    1272:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[5]
    1274:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[6] C is zero (brcc)
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <bitstuff7+0x6>
    rjmp    didStuff7       ;[8]
    1278:	21 c0       	rjmp	.+66     	; 0x12bc <didStuff7>

0000127a <bitstuffN>:

bitstuffN:
    eor     x1, x4          ;[5]
    127a:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
    127c:	10 e0       	ldi	r17, 0x00	; 0
    lpm                     ;[7] 3 cycle NOP, modifies r0
    127e:	c8 95       	lpm
    out     USBOUT, x1      ;[10] <-- out
    1280:	08 bb       	out	0x18, r16	; 24
    rjmp    didStuffN       ;[0]
    1282:	14 c0       	rjmp	.+40     	; 0x12ac <didStuffN>

00001284 <sendNakAndReti>:

#define bitStatus   x3

sendNakAndReti:
    ldi     cnt, USBPID_NAK ;[-19]
    1284:	3a e5       	ldi	r19, 0x5A	; 90
    rjmp    sendCntAndReti  ;[-18]
    1286:	01 c0       	rjmp	.+2      	; 0x128a <sendCntAndReti>

00001288 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
    1288:	32 ed       	ldi	r19, 0xD2	; 210

0000128a <sendCntAndReti>:
sendCntAndReti:
    mov     r0, cnt         ;[-16]
    128a:	03 2e       	mov	r0, r19
    ldi     YL, 0           ;[-15] R0 address is 0
    128c:	c0 e0       	ldi	r28, 0x00	; 0
    ldi     YH, 0           ;[-14]
    128e:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
    1290:	32 e0       	ldi	r19, 0x02	; 2

00001292 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte [range 2 ... 12]
;uses: x1...x4, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
    1292:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK     ;[-11]
    1294:	16 60       	ori	r17, 0x06	; 6
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
    1296:	c1 9a       	sbi	0x18, 1	; 24
    in      x1, USBOUT      ;[-8] port mirror for tx loop
    1298:	08 b3       	in	r16, 0x18	; 24
    out     USBDDR, x2      ;[-7] <- acquire bus
    129a:	17 bb       	out	0x17, r17	; 23
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
    129c:	56 e0       	ldi	r21, 0x06	; 6
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
    129e:	20 e8       	ldi	r18, 0x80	; 128
    ldi     bitStatus, 0xff ;[-4] init bit loop counter, works for up to 12 bytes
    12a0:	4f ef       	ldi	r20, 0xFF	; 255

000012a2 <bitloop>:
byteloop:
bitloop:
    sbrs    shift, 0        ;[8] [-3]
    12a2:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[9] [-2]
    12a4:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[10] [-1] <-- out
    12a6:	08 bb       	out	0x18, r16	; 24
    ror     shift           ;[0]
    12a8:	27 95       	ror	r18
    ror     x2              ;[1]
    12aa:	17 95       	ror	r17

000012ac <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
    12ac:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
    12ae:	28 f7       	brcc	.-54     	; 0x127a <bitstuffN>
    nop                     ;[4]
    12b0:	00 00       	nop
    subi    bitStatus, 37   ;[5] 256 / 7 ~=~ 37
    12b2:	45 52       	subi	r20, 0x25	; 37
    brcc    bitloop         ;[6] when we leave the loop, bitStatus has almost the initial value
    12b4:	b0 f7       	brcc	.-20     	; 0x12a2 <bitloop>
    sbrs    shift, 0        ;[7]
    12b6:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
    12b8:	05 27       	eor	r16, r21
    ror     shift           ;[9]
    12ba:	27 95       	ror	r18

000012bc <didStuff7>:
didStuff7:
    out     USBOUT, x1      ;[10] <-- out
    12bc:	08 bb       	out	0x18, r16	; 24
    ror     x2              ;[0]
    12be:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[1]
    12c0:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff7       ;[2]
    12c2:	b8 f6       	brcc	.-82     	; 0x1272 <bitstuff7>
    ld      shift, y+       ;[3]
    12c4:	29 91       	ld	r18, Y+
    dec     cnt             ;[5]
    12c6:	3a 95       	dec	r19
    brne    byteloop        ;[6]
    12c8:	61 f7       	brne	.-40     	; 0x12a2 <bitloop>
;make SE0:
    cbr     x1, USBMASK     ;[7] prepare SE0 [spec says EOP may be 21 to 25 cycles]
    12ca:	09 7f       	andi	r16, 0xF9	; 249
    lds     x2, usbNewDeviceAddr;[8]
    12cc:	10 91 94 00 	lds	r17, 0x0094
    lsl     x2              ;[10] we compare with left shifted address
    12d0:	11 0f       	add	r17, r17
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
    12d2:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    subi    YL, 2           ;[0] Only assign address on data packets, not ACK/NAK in r0
    12d4:	c2 50       	subi	r28, 0x02	; 2
    sbci    YH, 0           ;[1]
    12d6:	d0 40       	sbci	r29, 0x00	; 0
    breq    skipAddrAssign  ;[2]
    12d8:	11 f0       	breq	.+4      	; 0x12de <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
    12da:	10 93 8e 00 	sts	0x008E, r17

000012de <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[4] int0 occurred during TX -- clear pending flag
    12de:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[5]
    12e0:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[6]
    12e2:	02 60       	ori	r16, 0x02	; 2
    in      x2, USBDDR      ;[7]
    12e4:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK     ;[8] set both pins to input
    12e6:	19 7f       	andi	r17, 0xF9	; 249
    mov     x3, x1          ;[9]
    12e8:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[10] configure no pullup on both pins
    12ea:	49 7f       	andi	r20, 0xF9	; 249
    ldi     x4, 4           ;[11]
    12ec:	54 e0       	ldi	r21, 0x04	; 4

000012ee <se0Delay>:
se0Delay:
    dec     x4              ;[12] [15] [18] [21]
    12ee:	5a 95       	dec	r21
    brne    se0Delay        ;[13] [16] [19] [22]
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <se0Delay>
    out     USBOUT, x1      ;[23] <-- out J (idle) -- end of SE0 (EOP signal)
    12f2:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2      ;[24] <-- release bus now
    12f4:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3      ;[25] <-- ensure no pull-up resistors are active
    12f6:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
    12f8:	7f cf       	rjmp	.-258    	; 0x11f8 <doReturn>

000012fa <main>:
{
    uchar i;
    uchar calibrationValue;
    uchar mod, hid, delay;

    calibrationValue = eeprom_read_byte(0); // calibration value from last time
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	60 d1       	rcall	.+704    	; 0x15c0 <__eerd_byte_tn85>
    
    if(calibrationValue != 0xff) {
    1300:	8f 3f       	cpi	r24, 0xFF	; 255
    1302:	09 f0       	breq	.+2      	; 0x1306 <main+0xc>
        OSCCAL = calibrationValue;
    1304:	81 bf       	out	0x31, r24	; 49
    }
    
    odDebugInit();
    usbDeviceDisconnect();
    1306:	b9 9a       	sbi	0x17, 1	; 23
    1308:	84 e1       	ldi	r24, 0x14	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    130a:	e2 eb       	ldi	r30, 0xB2	; 178
    130c:	f1 ef       	ldi	r31, 0xF1	; 241
    130e:	31 97       	sbiw	r30, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <main+0x14>
    1312:	00 c0       	rjmp	.+0      	; 0x1314 <main+0x1a>
    1314:	00 00       	nop
    1316:	81 50       	subi	r24, 0x01	; 1
    
    for (i = 0; i < 20; i++) {  // 300 ms disconnect
    1318:	c1 f7       	brne	.-16     	; 0x130a <main+0x10>
        _delay_ms(15);
    }

    usbDeviceConnect();
    131a:	b9 98       	cbi	0x17, 1	; 23

    wdt_enable(WDTO_1S);
    131c:	2e e0       	ldi	r18, 0x0E	; 14
    131e:	88 e1       	ldi	r24, 0x18	; 24
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	a8 95       	wdr
    1328:	81 bd       	out	0x21, r24	; 33
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	21 bd       	out	0x21, r18	; 33
    }
}

static void timerInit(void)
{
    TCCR1 = 0x0b; // select clock: 16.5M/1k -> overflow rate = 16.5M/256k = 62.94 Hz
    132e:	8b e0       	ldi	r24, 0x0B	; 11
    1330:	80 bf       	out	0x30, r24	; 48

    usbDeviceConnect();

    wdt_enable(WDTO_1S);
    timerInit();
    TimerDelay = 315; // initial 5 second delay
    1332:	8b e3       	ldi	r24, 0x3B	; 59
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	a0 e0       	ldi	r26, 0x00	; 0
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	80 93 6e 00 	sts	0x006E, r24
    133e:	90 93 6f 00 	sts	0x006F, r25
    1342:	a0 93 70 00 	sts	0x0070, r26
    1346:	b0 93 71 00 	sts	0x0071, r27

    usbInit();
    134a:	44 de       	rcall	.-888    	; 0xfd4 <usbInit>
    sei();
    134c:	78 94       	sei
                reportCount = 0;
                if (attempt == 0) {
                    TimerDelay = 3780; // 60 seconds
                    attempt++;
                } else if (attempt == 1) {
                    TimerDelay = 18900; // 5 mins
    134e:	44 ed       	ldi	r20, 0xD4	; 212
    1350:	84 2e       	mov	r8, r20
    1352:	49 e4       	ldi	r20, 0x49	; 73
    1354:	94 2e       	mov	r9, r20
    1356:	a1 2c       	mov	r10, r1
    1358:	b1 2c       	mov	r11, r1
                    attempt++;
    135a:	c2 e0       	ldi	r28, 0x02	; 2
    135c:	d0 e0       	ldi	r29, 0x00	; 0
                buildReport(0, 0);
                usbSetInterrupt(reportBuffer, sizeof(reportBuffer));
                index = 0;
                reportCount = 0;
                if (attempt == 0) {
                    TimerDelay = 3780; // 60 seconds
    135e:	54 ec       	ldi	r21, 0xC4	; 196
    1360:	45 2e       	mov	r4, r21
    1362:	5e e0       	ldi	r21, 0x0E	; 14
    1364:	55 2e       	mov	r5, r21
    1366:	61 2c       	mov	r6, r1
    1368:	71 2c       	mov	r7, r1
                    attempt++;
    136a:	01 e0       	ldi	r16, 0x01	; 1
    136c:	10 e0       	ldi	r17, 0x00	; 0
    static unsigned int timerCnt;

    if (TIFR & (1 << TOV1)) {
        TIFR = (1 << TOV1); // clear overflow
        if (++timerCnt >= TimerDelay) { // check for end of pseudorandom delay
            TimerDelay = 1;
    136e:	c1 2c       	mov	r12, r1
    1370:	d1 2c       	mov	r13, r1
    1372:	76 01       	movw	r14, r12
    1374:	c3 94       	inc	r12
static void timerPoll(void)
{
    static unsigned int timerCnt;

    if (TIFR & (1 << TOV1)) {
        TIFR = (1 << TOV1); // clear overflow
    1376:	34 e0       	ldi	r19, 0x04	; 4
    1378:	33 2e       	mov	r3, r19

    usbInit();
    sei();

    for (;;) {    // main event loop
        wdt_reset();
    137a:	a8 95       	wdr
        usbPoll();
    137c:	14 dd       	rcall	.-1496   	; 0xda6 <usbPoll>

        if (usbInterruptIsReady() && TimerDelay == 1) {
    137e:	80 91 60 00 	lds	r24, 0x0060
    1382:	84 ff       	sbrs	r24, 4
    1384:	a3 c0       	rjmp	.+326    	; 0x14cc <main+0x1d2>
    1386:	80 91 6e 00 	lds	r24, 0x006E
    138a:	90 91 6f 00 	lds	r25, 0x006F
    138e:	a0 91 70 00 	lds	r26, 0x0070
    1392:	b0 91 71 00 	lds	r27, 0x0071
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	a1 05       	cpc	r26, r1
    139a:	b1 05       	cpc	r27, r1
    139c:	09 f0       	breq	.+2      	; 0x13a0 <main+0xa6>
    139e:	96 c0       	rjmp	.+300    	; 0x14cc <main+0x1d2>

            mod   = pgm_read_byte(&(attack[index]));
    13a0:	80 91 6c 00 	lds	r24, 0x006C
    13a4:	90 91 6d 00 	lds	r25, 0x006D
    13a8:	fc 01       	movw	r30, r24
    13aa:	ef 5b       	subi	r30, 0xBF	; 191
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	34 91       	lpm	r19, Z
            hid   = pgm_read_byte(&(attack[index + 1]));
    13b0:	fc 01       	movw	r30, r24
    13b2:	ee 5b       	subi	r30, 0xBE	; 190
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	24 91       	lpm	r18, Z
            delay = pgm_read_byte(&(attack[index + 2]));
    13b8:	fc 01       	movw	r30, r24
    13ba:	ed 5b       	subi	r30, 0xBD	; 189
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	24 90       	lpm	r2, Z
    13c0:	80 91 72 00 	lds	r24, 0x0072

            if (mod == 0x41 && hid == 0x41 && delay == 0x41) {
    13c4:	31 34       	cpi	r19, 0x41	; 65
    13c6:	09 f0       	breq	.+2      	; 0x13ca <main+0xd0>
    13c8:	50 c0       	rjmp	.+160    	; 0x146a <main+0x170>
    13ca:	21 34       	cpi	r18, 0x41	; 65
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <main+0xd6>
    13ce:	4d c0       	rjmp	.+154    	; 0x146a <main+0x170>
    13d0:	f1 e4       	ldi	r31, 0x41	; 65
    13d2:	2f 12       	cpse	r2, r31
    13d4:	4a c0       	rjmp	.+148    	; 0x146a <main+0x170>
 * for the second INPUT item.
 */

static void buildReport(uchar mod, uchar key)
{
    reportCount++;
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	80 93 72 00 	sts	0x0072, r24
    reportBuffer[0] = mod;
    13dc:	10 92 74 00 	sts	0x0074, r1
    reportBuffer[1] = key;
    13e0:	10 92 75 00 	sts	0x0075, r1
            hid   = pgm_read_byte(&(attack[index + 1]));
            delay = pgm_read_byte(&(attack[index + 2]));

            if (mod == 0x41 && hid == 0x41 && delay == 0x41) {
                buildReport(0, 0);
                usbSetInterrupt(reportBuffer, sizeof(reportBuffer));
    13e4:	62 e0       	ldi	r22, 0x02	; 2
    13e6:	84 e7       	ldi	r24, 0x74	; 116
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	ba dc       	rcall	.-1676   	; 0xd60 <usbSetInterrupt>
                index = 0;
    13ec:	10 92 6d 00 	sts	0x006D, r1
    13f0:	10 92 6c 00 	sts	0x006C, r1
                reportCount = 0;
    13f4:	10 92 72 00 	sts	0x0072, r1
                if (attempt == 0) {
    13f8:	80 91 6a 00 	lds	r24, 0x006A
    13fc:	90 91 6b 00 	lds	r25, 0x006B
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	69 f4       	brne	.+26     	; 0x141e <main+0x124>
                    TimerDelay = 3780; // 60 seconds
    1404:	40 92 6e 00 	sts	0x006E, r4
    1408:	50 92 6f 00 	sts	0x006F, r5
    140c:	60 92 70 00 	sts	0x0070, r6
    1410:	70 92 71 00 	sts	0x0071, r7
                    attempt++;
    1414:	10 93 6b 00 	sts	0x006B, r17
    1418:	00 93 6a 00 	sts	0x006A, r16
    141c:	57 c0       	rjmp	.+174    	; 0x14cc <main+0x1d2>
                } else if (attempt == 1) {
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	69 f4       	brne	.+26     	; 0x143c <main+0x142>
                    TimerDelay = 18900; // 5 mins
    1422:	80 92 6e 00 	sts	0x006E, r8
    1426:	90 92 6f 00 	sts	0x006F, r9
    142a:	a0 92 70 00 	sts	0x0070, r10
    142e:	b0 92 71 00 	sts	0x0071, r11
                    attempt++;
    1432:	d0 93 6b 00 	sts	0x006B, r29
    1436:	c0 93 6a 00 	sts	0x006A, r28
    143a:	48 c0       	rjmp	.+144    	; 0x14cc <main+0x1d2>
                } else {
                    TimerDelay = 907200 + rand() * 8; // 4 hours + 0...64 minutes
    143c:	b2 d0       	rcall	.+356    	; 0x15a2 <rand>
    143e:	23 e0       	ldi	r18, 0x03	; 3
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	2a 95       	dec	r18
    1446:	e1 f7       	brne	.-8      	; 0x1440 <main+0x146>
    1448:	aa 27       	eor	r26, r26
    144a:	97 fd       	sbrc	r25, 7
    144c:	a0 95       	com	r26
    144e:	ba 2f       	mov	r27, r26
    1450:	80 54       	subi	r24, 0x40	; 64
    1452:	98 42       	sbci	r25, 0x28	; 40
    1454:	a2 4f       	sbci	r26, 0xF2	; 242
    1456:	bf 4f       	sbci	r27, 0xFF	; 255
    1458:	80 93 6e 00 	sts	0x006E, r24
    145c:	90 93 6f 00 	sts	0x006F, r25
    1460:	a0 93 70 00 	sts	0x0070, r26
    1464:	b0 93 71 00 	sts	0x0071, r27
    1468:	31 c0       	rjmp	.+98     	; 0x14cc <main+0x1d2>
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	98 0f       	add	r25, r24
 * for the second INPUT item.
 */

static void buildReport(uchar mod, uchar key)
{
    reportCount++;
    146e:	90 93 72 00 	sts	0x0072, r25
                    TimerDelay = 18900; // 5 mins
                    attempt++;
                } else {
                    TimerDelay = 907200 + rand() * 8; // 4 hours + 0...64 minutes
                }
            } else if (reportCount & 1) {
    1472:	80 ff       	sbrs	r24, 0
    1474:	09 c0       	rjmp	.+18     	; 0x1488 <main+0x18e>
 */

static void buildReport(uchar mod, uchar key)
{
    reportCount++;
    reportBuffer[0] = mod;
    1476:	10 92 74 00 	sts	0x0074, r1
    reportBuffer[1] = key;
    147a:	10 92 75 00 	sts	0x0075, r1
                } else {
                    TimerDelay = 907200 + rand() * 8; // 4 hours + 0...64 minutes
                }
            } else if (reportCount & 1) {
                buildReport(0, 0);
                usbSetInterrupt(reportBuffer, sizeof(reportBuffer));
    147e:	62 e0       	ldi	r22, 0x02	; 2
    1480:	84 e7       	ldi	r24, 0x74	; 116
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	6d dc       	rcall	.-1830   	; 0xd60 <usbSetInterrupt>
    1486:	22 c0       	rjmp	.+68     	; 0x14cc <main+0x1d2>
 */

static void buildReport(uchar mod, uchar key)
{
    reportCount++;
    reportBuffer[0] = mod;
    1488:	30 93 74 00 	sts	0x0074, r19
    reportBuffer[1] = key;
    148c:	20 93 75 00 	sts	0x0075, r18
            } else if (reportCount & 1) {
                buildReport(0, 0);
                usbSetInterrupt(reportBuffer, sizeof(reportBuffer));
            } else {
                buildReport(mod, hid);
                usbSetInterrupt(reportBuffer, sizeof(reportBuffer));
    1490:	62 e0       	ldi	r22, 0x02	; 2
    1492:	84 e7       	ldi	r24, 0x74	; 116
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	64 dc       	rcall	.-1848   	; 0xd60 <usbSetInterrupt>
                
                if (delay) {
    1498:	22 20       	and	r2, r2
    149a:	79 f0       	breq	.+30     	; 0x14ba <main+0x1c0>
                    TimerDelay = delay + 1;
    149c:	82 2d       	mov	r24, r2
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	aa 27       	eor	r26, r26
    14a4:	97 fd       	sbrc	r25, 7
    14a6:	a0 95       	com	r26
    14a8:	ba 2f       	mov	r27, r26
    14aa:	80 93 6e 00 	sts	0x006E, r24
    14ae:	90 93 6f 00 	sts	0x006F, r25
    14b2:	a0 93 70 00 	sts	0x0070, r26
    14b6:	b0 93 71 00 	sts	0x0071, r27
                }
                index += 3;
    14ba:	80 91 6c 00 	lds	r24, 0x006C
    14be:	90 91 6d 00 	lds	r25, 0x006D
    14c2:	03 96       	adiw	r24, 0x03	; 3
    14c4:	90 93 6d 00 	sts	0x006D, r25
    14c8:	80 93 6c 00 	sts	0x006C, r24

static void timerPoll(void)
{
    static unsigned int timerCnt;

    if (TIFR & (1 << TOV1)) {
    14cc:	08 b6       	in	r0, 0x38	; 56
    14ce:	02 fe       	sbrs	r0, 2
    14d0:	54 cf       	rjmp	.-344    	; 0x137a <main+0x80>
        TIFR = (1 << TOV1); // clear overflow
    14d2:	38 be       	out	0x38, r3	; 56
        if (++timerCnt >= TimerDelay) { // check for end of pseudorandom delay
    14d4:	40 91 68 00 	lds	r20, 0x0068
    14d8:	50 91 69 00 	lds	r21, 0x0069
    14dc:	4f 5f       	subi	r20, 0xFF	; 255
    14de:	5f 4f       	sbci	r21, 0xFF	; 255
    14e0:	50 93 69 00 	sts	0x0069, r21
    14e4:	40 93 68 00 	sts	0x0068, r20
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	80 91 6e 00 	lds	r24, 0x006E
    14f0:	90 91 6f 00 	lds	r25, 0x006F
    14f4:	a0 91 70 00 	lds	r26, 0x0070
    14f8:	b0 91 71 00 	lds	r27, 0x0071
    14fc:	48 17       	cp	r20, r24
    14fe:	59 07       	cpc	r21, r25
    1500:	6a 07       	cpc	r22, r26
    1502:	7b 07       	cpc	r23, r27
    1504:	08 f4       	brcc	.+2      	; 0x1508 <main+0x20e>
    1506:	39 cf       	rjmp	.-398    	; 0x137a <main+0x80>
            TimerDelay = 1;
    1508:	c0 92 6e 00 	sts	0x006E, r12
    150c:	d0 92 6f 00 	sts	0x006F, r13
    1510:	e0 92 70 00 	sts	0x0070, r14
    1514:	f0 92 71 00 	sts	0x0071, r15
            timerCnt = 0;
    1518:	10 92 69 00 	sts	0x0069, r1
    151c:	10 92 68 00 	sts	0x0068, r1
    1520:	2a cf       	rjmp	.-428    	; 0x1376 <main+0x7c>

00001522 <do_rand>:
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e6 e9       	ldi	r30, 0x96	; 150
    1528:	fa e0       	ldi	r31, 0x0A	; 10
    152a:	9f c0       	rjmp	.+318    	; 0x166a <__prologue_saves__+0xc>
    152c:	ec 01       	movw	r28, r24
    152e:	68 81       	ld	r22, Y
    1530:	79 81       	ldd	r23, Y+1	; 0x01
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	9b 81       	ldd	r25, Y+3	; 0x03
    1536:	61 15       	cp	r22, r1
    1538:	71 05       	cpc	r23, r1
    153a:	81 05       	cpc	r24, r1
    153c:	91 05       	cpc	r25, r1
    153e:	21 f4       	brne	.+8      	; 0x1548 <do_rand+0x26>
    1540:	64 e2       	ldi	r22, 0x24	; 36
    1542:	79 ed       	ldi	r23, 0xD9	; 217
    1544:	8b e5       	ldi	r24, 0x5B	; 91
    1546:	97 e0       	ldi	r25, 0x07	; 7
    1548:	2d e1       	ldi	r18, 0x1D	; 29
    154a:	33 ef       	ldi	r19, 0xF3	; 243
    154c:	41 e0       	ldi	r20, 0x01	; 1
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	4d d0       	rcall	.+154    	; 0x15ec <__divmodsi4>
    1552:	49 01       	movw	r8, r18
    1554:	5a 01       	movw	r10, r20
    1556:	27 ea       	ldi	r18, 0xA7	; 167
    1558:	31 e4       	ldi	r19, 0x41	; 65
    155a:	40 e0       	ldi	r20, 0x00	; 0
    155c:	50 e0       	ldi	r21, 0x00	; 0
    155e:	62 d0       	rcall	.+196    	; 0x1624 <__mulsidi3>
    1560:	69 01       	movw	r12, r18
    1562:	7a 01       	movw	r14, r20
    1564:	c5 01       	movw	r24, r10
    1566:	b4 01       	movw	r22, r8
    1568:	2c ee       	ldi	r18, 0xEC	; 236
    156a:	34 ef       	ldi	r19, 0xF4	; 244
    156c:	4f ef       	ldi	r20, 0xFF	; 255
    156e:	5f ef       	ldi	r21, 0xFF	; 255
    1570:	59 d0       	rcall	.+178    	; 0x1624 <__mulsidi3>
    1572:	89 01       	movw	r16, r18
    1574:	9a 01       	movw	r18, r20
    1576:	d7 01       	movw	r26, r14
    1578:	c6 01       	movw	r24, r12
    157a:	80 0f       	add	r24, r16
    157c:	91 1f       	adc	r25, r17
    157e:	a2 1f       	adc	r26, r18
    1580:	b3 1f       	adc	r27, r19
    1582:	b7 ff       	sbrs	r27, 7
    1584:	03 c0       	rjmp	.+6      	; 0x158c <do_rand+0x6a>
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	a1 09       	sbc	r26, r1
    158a:	b0 48       	sbci	r27, 0x80	; 128
    158c:	88 83       	st	Y, r24
    158e:	99 83       	std	Y+1, r25	; 0x01
    1590:	aa 83       	std	Y+2, r26	; 0x02
    1592:	bb 83       	std	Y+3, r27	; 0x03
    1594:	9f 77       	andi	r25, 0x7F	; 127
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	ec e0       	ldi	r30, 0x0C	; 12
    159c:	82 c0       	rjmp	.+260    	; 0x16a2 <__epilogue_restores__+0xc>

0000159e <rand_r>:
    159e:	c1 df       	rcall	.-126    	; 0x1522 <do_rand>
    15a0:	08 95       	ret

000015a2 <rand>:
    15a2:	83 e6       	ldi	r24, 0x63	; 99
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	bd df       	rcall	.-134    	; 0x1522 <do_rand>
    15a8:	08 95       	ret

000015aa <srand>:
    15aa:	a0 e0       	ldi	r26, 0x00	; 0
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	80 93 63 00 	sts	0x0063, r24
    15b2:	90 93 64 00 	sts	0x0064, r25
    15b6:	a0 93 65 00 	sts	0x0065, r26
    15ba:	b0 93 66 00 	sts	0x0066, r27
    15be:	08 95       	ret

000015c0 <__eerd_byte_tn85>:
    15c0:	e1 99       	sbic	0x1c, 1	; 28
    15c2:	fe cf       	rjmp	.-4      	; 0x15c0 <__eerd_byte_tn85>
    15c4:	9f bb       	out	0x1f, r25	; 31
    15c6:	8e bb       	out	0x1e, r24	; 30
    15c8:	e0 9a       	sbi	0x1c, 0	; 28
    15ca:	99 27       	eor	r25, r25
    15cc:	8d b3       	in	r24, 0x1d	; 29
    15ce:	08 95       	ret

000015d0 <__eewr_byte_tn85>:
    15d0:	26 2f       	mov	r18, r22

000015d2 <__eewr_r18_tn85>:
    15d2:	e1 99       	sbic	0x1c, 1	; 28
    15d4:	fe cf       	rjmp	.-4      	; 0x15d2 <__eewr_r18_tn85>
    15d6:	1c ba       	out	0x1c, r1	; 28
    15d8:	9f bb       	out	0x1f, r25	; 31
    15da:	8e bb       	out	0x1e, r24	; 30
    15dc:	2d bb       	out	0x1d, r18	; 29
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	f8 94       	cli
    15e2:	e2 9a       	sbi	0x1c, 2	; 28
    15e4:	e1 9a       	sbi	0x1c, 1	; 28
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	08 95       	ret

000015ec <__divmodsi4>:
    15ec:	05 2e       	mov	r0, r21
    15ee:	97 fb       	bst	r25, 7
    15f0:	16 f4       	brtc	.+4      	; 0x15f6 <__divmodsi4+0xa>
    15f2:	00 94       	com	r0
    15f4:	0f d0       	rcall	.+30     	; 0x1614 <__negsi2>
    15f6:	57 fd       	sbrc	r21, 7
    15f8:	05 d0       	rcall	.+10     	; 0x1604 <__divmodsi4_neg2>
    15fa:	68 d0       	rcall	.+208    	; 0x16cc <__udivmodsi4>
    15fc:	07 fc       	sbrc	r0, 7
    15fe:	02 d0       	rcall	.+4      	; 0x1604 <__divmodsi4_neg2>
    1600:	46 f4       	brtc	.+16     	; 0x1612 <__divmodsi4_exit>
    1602:	08 c0       	rjmp	.+16     	; 0x1614 <__negsi2>

00001604 <__divmodsi4_neg2>:
    1604:	50 95       	com	r21
    1606:	40 95       	com	r20
    1608:	30 95       	com	r19
    160a:	21 95       	neg	r18
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
    160e:	4f 4f       	sbci	r20, 0xFF	; 255
    1610:	5f 4f       	sbci	r21, 0xFF	; 255

00001612 <__divmodsi4_exit>:
    1612:	08 95       	ret

00001614 <__negsi2>:
    1614:	90 95       	com	r25
    1616:	80 95       	com	r24
    1618:	70 95       	com	r23
    161a:	61 95       	neg	r22
    161c:	7f 4f       	sbci	r23, 0xFF	; 255
    161e:	8f 4f       	sbci	r24, 0xFF	; 255
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	08 95       	ret

00001624 <__mulsidi3>:
    1624:	68 94       	set
    1626:	00 13       	cpse	r16, r16

00001628 <__umulsidi3>:
    1628:	e8 94       	clt
    162a:	a0 e0       	ldi	r26, 0x00	; 0
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	ea e1       	ldi	r30, 0x1A	; 26
    1630:	fb e0       	ldi	r31, 0x0B	; 11
    1632:	1d c0       	rjmp	.+58     	; 0x166e <__prologue_saves__+0x10>
    1634:	ef ef       	ldi	r30, 0xFF	; 255
    1636:	e7 f9       	bld	r30, 7
    1638:	59 01       	movw	r10, r18
    163a:	6a 01       	movw	r12, r20
    163c:	5e 23       	and	r21, r30
    163e:	55 0f       	add	r21, r21
    1640:	ee 08       	sbc	r14, r14
    1642:	fe 2c       	mov	r15, r14
    1644:	87 01       	movw	r16, r14
    1646:	9b 01       	movw	r18, r22
    1648:	ac 01       	movw	r20, r24
    164a:	9e 23       	and	r25, r30
    164c:	99 0f       	add	r25, r25
    164e:	66 0b       	sbc	r22, r22
    1650:	76 2f       	mov	r23, r22
    1652:	cb 01       	movw	r24, r22
    1654:	5d d0       	rcall	.+186    	; 0x1710 <__muldi3>
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	ea e0       	ldi	r30, 0x0A	; 10
    165c:	24 c0       	rjmp	.+72     	; 0x16a6 <__epilogue_restores__+0x10>

0000165e <__prologue_saves__>:
    165e:	2f 92       	push	r2
    1660:	3f 92       	push	r3
    1662:	4f 92       	push	r4
    1664:	5f 92       	push	r5
    1666:	6f 92       	push	r6
    1668:	7f 92       	push	r7
    166a:	8f 92       	push	r8
    166c:	9f 92       	push	r9
    166e:	af 92       	push	r10
    1670:	bf 92       	push	r11
    1672:	cf 92       	push	r12
    1674:	df 92       	push	r13
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	ca 1b       	sub	r28, r26
    1688:	db 0b       	sbc	r29, r27
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	09 94       	ijmp

00001696 <__epilogue_restores__>:
    1696:	2a 88       	ldd	r2, Y+18	; 0x12
    1698:	39 88       	ldd	r3, Y+17	; 0x11
    169a:	48 88       	ldd	r4, Y+16	; 0x10
    169c:	5f 84       	ldd	r5, Y+15	; 0x0f
    169e:	6e 84       	ldd	r6, Y+14	; 0x0e
    16a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    16a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    16a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    16a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    16a8:	b9 84       	ldd	r11, Y+9	; 0x09
    16aa:	c8 84       	ldd	r12, Y+8	; 0x08
    16ac:	df 80       	ldd	r13, Y+7	; 0x07
    16ae:	ee 80       	ldd	r14, Y+6	; 0x06
    16b0:	fd 80       	ldd	r15, Y+5	; 0x05
    16b2:	0c 81       	ldd	r16, Y+4	; 0x04
    16b4:	1b 81       	ldd	r17, Y+3	; 0x03
    16b6:	aa 81       	ldd	r26, Y+2	; 0x02
    16b8:	b9 81       	ldd	r27, Y+1	; 0x01
    16ba:	ce 0f       	add	r28, r30
    16bc:	d1 1d       	adc	r29, r1
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	ed 01       	movw	r28, r26
    16ca:	08 95       	ret

000016cc <__udivmodsi4>:
    16cc:	a1 e2       	ldi	r26, 0x21	; 33
    16ce:	1a 2e       	mov	r1, r26
    16d0:	aa 1b       	sub	r26, r26
    16d2:	bb 1b       	sub	r27, r27
    16d4:	fd 01       	movw	r30, r26
    16d6:	0d c0       	rjmp	.+26     	; 0x16f2 <__udivmodsi4_ep>

000016d8 <__udivmodsi4_loop>:
    16d8:	aa 1f       	adc	r26, r26
    16da:	bb 1f       	adc	r27, r27
    16dc:	ee 1f       	adc	r30, r30
    16de:	ff 1f       	adc	r31, r31
    16e0:	a2 17       	cp	r26, r18
    16e2:	b3 07       	cpc	r27, r19
    16e4:	e4 07       	cpc	r30, r20
    16e6:	f5 07       	cpc	r31, r21
    16e8:	20 f0       	brcs	.+8      	; 0x16f2 <__udivmodsi4_ep>
    16ea:	a2 1b       	sub	r26, r18
    16ec:	b3 0b       	sbc	r27, r19
    16ee:	e4 0b       	sbc	r30, r20
    16f0:	f5 0b       	sbc	r31, r21

000016f2 <__udivmodsi4_ep>:
    16f2:	66 1f       	adc	r22, r22
    16f4:	77 1f       	adc	r23, r23
    16f6:	88 1f       	adc	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	1a 94       	dec	r1
    16fc:	69 f7       	brne	.-38     	; 0x16d8 <__udivmodsi4_loop>
    16fe:	60 95       	com	r22
    1700:	70 95       	com	r23
    1702:	80 95       	com	r24
    1704:	90 95       	com	r25
    1706:	9b 01       	movw	r18, r22
    1708:	ac 01       	movw	r20, r24
    170a:	bd 01       	movw	r22, r26
    170c:	cf 01       	movw	r24, r30
    170e:	08 95       	ret

00001710 <__muldi3>:
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	9f 92       	push	r9
    1716:	a0 e4       	ldi	r26, 0x40	; 64
    1718:	9a 2e       	mov	r9, r26
    171a:	00 24       	eor	r0, r0
    171c:	d0 01       	movw	r26, r0
    171e:	e0 01       	movw	r28, r0
    1720:	f0 01       	movw	r30, r0
    1722:	16 95       	lsr	r17
    1724:	07 95       	ror	r16
    1726:	f7 94       	ror	r15
    1728:	e7 94       	ror	r14
    172a:	d7 94       	ror	r13
    172c:	c7 94       	ror	r12
    172e:	b7 94       	ror	r11
    1730:	a7 94       	ror	r10
    1732:	48 f4       	brcc	.+18     	; 0x1746 <__muldi3+0x36>
    1734:	10 68       	ori	r17, 0x80	; 128
    1736:	a2 0f       	add	r26, r18
    1738:	b3 1f       	adc	r27, r19
    173a:	c4 1f       	adc	r28, r20
    173c:	d5 1f       	adc	r29, r21
    173e:	e6 1f       	adc	r30, r22
    1740:	f7 1f       	adc	r31, r23
    1742:	08 1e       	adc	r0, r24
    1744:	19 1e       	adc	r1, r25
    1746:	22 0f       	add	r18, r18
    1748:	33 1f       	adc	r19, r19
    174a:	44 1f       	adc	r20, r20
    174c:	55 1f       	adc	r21, r21
    174e:	66 1f       	adc	r22, r22
    1750:	77 1f       	adc	r23, r23
    1752:	88 1f       	adc	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	9a 94       	dec	r9
    1758:	21 f7       	brne	.-56     	; 0x1722 <__muldi3+0x12>
    175a:	9d 01       	movw	r18, r26
    175c:	ae 01       	movw	r20, r28
    175e:	bf 01       	movw	r22, r30
    1760:	c0 01       	movw	r24, r0
    1762:	11 24       	eor	r1, r1
    1764:	9f 90       	pop	r9
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <_exit>:
    176c:	f8 94       	cli

0000176e <__stop_program>:
    176e:	ff cf       	rjmp	.-2      	; 0x176e <__stop_program>
